#[cfg(test)]
mod tests {
    use num::Complex;
    use crate::wavelet_transform::cwt::{cwt_1d, cwt_2d, cwt_3d};
    use crate::wavelet_transform::cwt_types::ContinuousWaletetType;
    use crate::wavelet_transform::fft::{fft_real1_d, fft_real2_d};

    #[test]
    fn test_cwt_1d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<f64> = vec![1.0, 2.0, 3.0];

        let (transform_cwt, frequencies) = cwt_1d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![-0.6741036718169315, 0.7022068718530412, 2.338346780786158]);
        assert_eq!(transform_cwt[1], vec![0.5041676154169978, 2.23192367774792, 2.9105329108437434]);
        assert_eq!(transform_cwt[2], vec![1.4601796060827077, 2.417532862790752, 2.6758970235153003]);
        assert_eq!(transform_cwt[3], vec![1.7607301542542242, 2.297982153373181, 2.4488656061501315]);
        assert_eq!(transform_cwt[4], vec![1.7858211385362848, 2.1782640485201874, 2.271167123147155]);

        assert_eq!(5, frequencies.len());
        assert_eq!(frequencies[0], 0.25);
        assert_eq!(frequencies[1], 0.125);
        assert_eq!(frequencies[2], 0.08333333333333333);
        assert_eq!(frequencies[3], 0.0625);
        assert_eq!(frequencies[4], 0.05);


        let n: Vec<f64> = vec![1.0, 2.0, 3.0];
        let (transform_cwt, _frequencies) = cwt_1d(&n, &scales, &ContinuousWaletetType::MORL, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![0.13312470806030496, -0.013558459804805245, -0.4970335050651978]);
        assert_eq!(transform_cwt[1], vec![0.21189431614302395, -0.522390003427577, 0.5322270880760533]);
        assert_eq!(transform_cwt[2], vec![-0.9610723822936088, -0.06351489890411584, 1.3486265178219836]);
        assert_eq!(transform_cwt[3], vec![-1.0312340486572287, 0.7492048315884942, 1.7572443706756848]);
        assert_eq!(transform_cwt[4], vec![-0.4331415080904223, 1.1982045191610786, 1.9120855697024635]);
    }

    #[test]
    fn test_cwt_2d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];

        let (transform_cwt, frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[-0.67410367181693154, 0.7022068718530412, 2.338346780786158], [-0.5880689304740532, 2.9826221113324345, 4.618762020265538]]);
        assert_eq!(transform_cwt[1], vec![[0.5041676154169978, 2.23192367774792, 2.9105329108437434], [2.2939493779819182, 6.088766119191671, 6.767375352287462]]);
        assert_eq!(transform_cwt[2], vec![[1.4601796060827077, 2.417532862790752, 2.6758970235153003], [4.193716683741932, 6.237605277520296, 6.4959694382448205]]);
        assert_eq!(transform_cwt[3], vec![[1.7607301542542242, 2.297982153373181, 2.4488656061501315], [4.708172248389279, 5.858117973015669, 6.009001425792602]]);
        assert_eq!(transform_cwt[4], vec![[1.7858211385362848, 2.1782640485201874, 2.271167123147155], [4.684000069989407, 5.515337427270696, 5.60824050189765]]);

        assert_eq!(5, frequencies.len());
        assert_eq!(frequencies[0], 0.25);
        assert_eq!(frequencies[1], 0.125);
        assert_eq!(frequencies[2], 0.08333333333333333);
        assert_eq!(frequencies[3], 0.0625);
        assert_eq!(frequencies[4], 0.05);

        let scales: Vec<f64> = (2..5).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0, 4.0], vec![5.0, 6.0, 7.0, 8.0]];
        let (transform_cwt, frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(3, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[-0.5581140923146637, 1.6424011241705805, 3.7198727962465195, 4.048766419597308], [0.7659798833735681, 6.195335159184911, 9.671669270240919, 8.601700454611564]]);
        assert_eq!(transform_cwt[1], vec![[1.1168209497544161, 2.838871815948713, 4.029221437984578, 4.054589233381288], [4.41817839697176, 8.353640655412732, 10.47597573875988, 9.569358072845233]]);
        assert_eq!(transform_cwt[2], vec![[2.039363009077822, 3.1639287410556776, 3.829970255621962, 3.8520641929515707], [6.247918656081495, 8.776723088261488, 9.957922664617087, 9.464858540157326]]);

        assert_eq!(3, frequencies.len());
        assert_eq!(frequencies[0], 0.125);
        assert_eq!(frequencies[1], 0.08333333333333333);
        assert_eq!(frequencies[2], 0.0625);

        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0, 4.0], vec![5.0, 6.0, 7.0, 8.0]];
        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MORL, &1.0);

        assert_eq!(3, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[-0.09947654391830107, 0.4599347842160327, -0.8706500057126223, 0.7802675561490783], [-0.1250426209060743, 1.4520966565080673, -2.2636900148528025, 1.772429428441178]]);
        assert_eq!(transform_cwt[1], vec![[-0.06117288750562455, -0.8318876704508201, -0.10585816484021879, 1.4778112296647783], [-0.014332696136464184, -0.31514882307966474, -0.2752312285846315, 1.9945500770359572]]);
        assert_eq!(transform_cwt[2], vec![[-1.4767664214628247, -0.7892306079844068, 1.248674719314122, 1.9992478113484808], [-2.4617944583899707, 0.17878315470687944, 3.2465542702166346, 2.9672615740396644]]);


        let scales: Vec<f64> = (5..10).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];
        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS1, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[-1.4216652542521802, -0.7393736993611678, 0.14658688966741465], [-3.214627170940993, -1.4038441411325764, 0.8110573314388728]],
                                       [[-1.1560698309634418, -0.5672717433901567, 0.10962876488391879], [-2.600557513364628, -1.0749471245956883, 0.6173041460895026]],
                                       [[-0.9646772006744484, -0.44693386305561605, 0.08195260328932553], [-2.162114044528977, -0.8435987128142975, 0.4786174530480493]],
                                       [[-0.7783742708627195, -0.39317800868043545, 0.0770961493084839], [-1.7552618616001827, -0.7458836271721042, 0.4298017678001954]],
                                       [[-0.6778466291062335, -0.3346644054307424, 0.07048087751875443], [-1.5185904653871027, -0.6385233676428417, 0.3743398397308937]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS2, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[1.670094212421506, 2.361587591670597, 2.5231947310153493], [4.561384005514502, 6.02517433368506, 6.186781473029793]],
                                       [[1.7868357410821185, 2.2556765947893287, 2.3855662078175404], [4.733982182815959, 5.736608696744483, 5.866498309772679]],
                                       [[1.8210379116144815, 2.1416158082951195, 2.280396042999311], [4.747578786052572, 5.458124696765944, 5.596904931470123]],
                                       [[1.772156247142522, 2.0852602236752533, 2.1542675384238312], [4.604194434809816, 5.264906045249569, 5.333913359998136]],
                                       [[1.7723171626458094, 1.984227178877041, 1.9770175344848195], [4.534945503632086, 4.955160713898438, 4.947951069506207]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS3, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[-1.918121121931172, -1.076605693314393, 0.20610530541960267], [-4.386064882073675, -2.0386389423648508, 1.168138554470137]],
                                       [[-1.626938220550193, -0.8420821530494805, 0.15871834584063874], [-3.687040123586735, -1.5926825272170322, 0.9093187200082654]],
                                       [[-1.3916539361654283, -0.6710947145753986, 0.1206028509125084], [-3.135875344621807, -1.2648678886912894, 0.7143760250284721]],
                                       [[-1.1434155190003565, -0.5941463857160402, 0.11489685950719453], [-2.5888197529037837, -1.1259288196334323, 0.646679293424657]],
                                       [[-1.0066588000531889, -0.5085781792429187, 0.10613836577988467], [-2.2620782773137416, -0.9696155880099893, 0.5671757745470192]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS4, &1.0);
        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[1.095434258569225, 2.1386410858746037, 2.428668598729466], [3.332695938289473, 5.5641233493276605, 5.854150862182492]],
                                       [[1.3807367334479579, 2.119239794344948, 2.3327838518114747], [3.874479378435026, 5.458257528962267, 5.671801586428772]],
                                       [[1.5253238909917226, 2.055663447862927, 2.2512195035049603], [4.127368519825421, 5.285825661388846, 5.48138171703086]],
                                       [[1.5674509001639976, 2.023799314129125, 2.138570255613088], [4.175494192763551, 5.145576491435786, 5.260347432919735]],
                                       [[1.6163299669306634, 1.944589163783718, 1.9722032459853944], [4.211858036303606, 4.882183471110555, 4.909797553312217]]]);


        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS5, &1.0);
        assert_eq!(transform_cwt, vec![[[-2.0929808169639905, -1.2734627853065092, 0.2344636281686233], [-4.847979187697129, -2.404407595412811, 1.3654084382750151]],
                                       [[-1.857124294592359, -1.016042616341748, 0.18641417819913453], [-4.243262828692157, -1.917885212247363, 1.0882567741048388]],
                                       [[-1.6303560474129226, -0.8192663881196661, 0.1441276154210695], [-3.6950023666393013, -1.5418118907751732, 0.8666731180766635]],
                                       [[-1.3649044763001776, -0.7300367073554581, 0.13914533116769748], [-3.1034048191573715, -1.3819232362477814, 0.7910318600601062]],
                                       [[-1.215191188582184, -0.62847013958095, 0.12993522488335318], [-2.7393159507459295, -1.1972741629291352, 0.698739248231619]]]);


        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS6, &1.0);
        assert_eq!(transform_cwt, vec![[[0.5932340086186624, 1.9082319259785985, 2.3161354883591208], [2.2425598708217622, 5.076507486731894, 5.484411049112377]],
                                       [[1.0009666044326875, 1.9681098468261915, 2.260307434657116], [3.0590375292362064, 5.1394228079386775, 5.43162039576957]],
                                       [[1.2357544417492288, 1.9528577883036613, 2.2021746063927576], [3.5102669821725665, 5.069132084325979, 5.31844890241505]],
                                       [[1.3581807603958258, 1.9448578231941163, 2.103745472782245], [3.7285123447857456, 4.981310295176391, 5.1401979447644965]],
                                       [[1.4511182899120803, 1.8876356515857802, 1.949620953708558], [3.861550731147749, 4.7655781055565365, 4.827563407679295]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS7, &1.0);
        assert_eq!(transform_cwt, vec![[[-2.1088449018328155, -1.3980741384175097, 0.24638344735049728], [-4.958266098290694, -2.6314173277434585, 1.4797266366765442]],
                                       [[-1.964253412037736, -1.1385721517346414, 0.2028961151845255], [-4.528815793895847, -2.1446733519239625, 1.2089973153739453]],
                                       [[-1.772153452657097, -0.929115796690148, 0.1598042487240505], [-4.041388441926794, -1.7458058307507434, 0.9764942827847469]],
                                       [[-1.512770461577792, -0.8333882651915774, 0.15645920802987043], [-3.4550081120119795, -1.575773870107611, 0.8988448129460032]],
                                       [[-1.3624380362768727, -0.7215986571715653, 0.1477523108658907], [-3.0813846768501034, -1.3736118831996103, 0.7997655368940295]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS8, &1.0);
        assert_eq!(transform_cwt, vec![[[0.16976056984694768, 1.687153362389826, 2.2029396495131746], [1.3120443926696528, 4.604723121317084, 5.120509408440386]],
                                       [[0.65938535202384, 1.8181880222938365, 2.184406928736499], [2.319419441805268, 4.820134235566595, 5.186353142009218]],
                                       [[0.9654698667242061, 1.8480862180093687, 2.148694961702508], [2.930135028376386, 4.845672102793282, 5.1462808464863885]],
                                       [[1.1572423414185264, 1.8627975513474906, 2.0642950945315124], [3.2962578443068105, 4.808117035756747, 5.00961457894074]],
                                       [[1.289461126655182, 1.8269082387062605, 1.9225130767929925], [3.5162775821851815, 4.6389742253307045, 4.73457906341741]]]);
    }

    #[test]
    fn test_cwt_3d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[[-0.6741036718169315, 0.7022068718530412, 2.338346780786158], [-0.5880689304740532, 2.9826221113324345, 4.618762020265538]], [[-0.6741036718169315, 0.7022068718530412, 2.338346780786158], [-0.5880689304740532, 2.9826221113324345, 4.618762020265538]]]);
        assert_eq!(transform_cwt[1], vec![[[0.5041676154169978, 2.23192367774792, 2.9105329108437434], [2.2939493779819182, 6.088766119191671, 6.767375352287462]], [[0.5041676154169978, 2.23192367774792, 2.9105329108437434], [2.2939493779819182, 6.088766119191671, 6.767375352287462]]]);
        assert_eq!(transform_cwt[2], vec![[[1.4601796060827077, 2.417532862790752, 2.6758970235153003], [4.193716683741932, 6.237605277520296, 6.4959694382448205]], [[1.4601796060827077, 2.417532862790752, 2.6758970235153003], [4.193716683741932, 6.237605277520296, 6.4959694382448205]]]);
        assert_eq!(transform_cwt[3], vec![[[1.7607301542542242, 2.297982153373181, 2.4488656061501315], [4.708172248389279, 5.858117973015669, 6.009001425792602]], [[1.7607301542542242, 2.297982153373181, 2.4488656061501315], [4.708172248389279, 5.858117973015669, 6.009001425792602]]]);
        assert_eq!(transform_cwt[4], vec![[[1.7858211385362848, 2.1782640485201874, 2.271167123147155], [4.684000069989407, 5.515337427270696, 5.60824050189765]], [[1.7858211385362848, 2.1782640485201874, 2.271167123147155], [4.684000069989407, 5.515337427270696, 5.60824050189765]]]);

        let scales = vec![1.0, 2.0, 3.0];
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS1, &1.0);
        assert_eq!(3, transform_cwt.len());

        assert_eq!(transform_cwt, vec![[[[-1.2395610940726745, -1.5060022157301245, -0.24828908285941376], [-3.9189852035172223, -2.449287065383139, 0.694995766793622]],
                                           [[-1.2395610940726745, -1.5060022157301245, -0.24828908285941376], [-3.9189852035172223, -2.449287065383139, 0.694995766793622]]],
                                       [[[-2.3112286755930693, -1.8314240244836684, 0.23981896270549802], [-5.696251666167044, -3.3848562648755123, 1.7932512030973904]],
                                           [[-2.3112286755930693, -1.8314240244836684, 0.23981896270549802], [-5.696251666167044, -3.3848562648755123, 1.7932512030973904]]],
                                       [[[-2.2095925166326147, -1.3341119315634973, 0.2289690082117302], [-5.133557721673222, -2.506422636394885, 1.4012797130431762]],
                                           [[-2.2095925166326147, -1.3341119315634973, 0.2289690082117302], [-5.133557721673222, -2.506422636394885, 1.4012797130431762]]]]);

        let scales: Vec<f64> = (5..10).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS2, &1.0);
        assert_eq!(5, transform_cwt.len());

        assert_eq!(transform_cwt, vec![[[[1.670094212421506, 2.361587591670597, 2.5231947310153493], [4.561384005514502, 6.02517433368506, 6.186781473029793]],
                                           [[1.670094212421506, 2.361587591670597, 2.5231947310153493], [4.561384005514502, 6.02517433368506, 6.186781473029793]]],
                                       [[[1.7868357410821185, 2.2556765947893287, 2.3855662078175404], [4.733982182815959, 5.736608696744483, 5.866498309772679]],
                                           [[1.7868357410821185, 2.2556765947893287, 2.3855662078175404], [4.733982182815959, 5.736608696744483, 5.866498309772679]]],
                                       [[[1.8210379116144815, 2.1416158082951195, 2.280396042999311], [4.747578786052572, 5.458124696765944, 5.596904931470123]],
                                           [[1.8210379116144815, 2.1416158082951195, 2.280396042999311], [4.747578786052572, 5.458124696765944, 5.596904931470123]]],
                                       [[[1.772156247142522, 2.0852602236752533, 2.1542675384238312], [4.604194434809816, 5.264906045249569, 5.333913359998136]],
                                           [[1.772156247142522, 2.0852602236752533, 2.1542675384238312], [4.604194434809816, 5.264906045249569, 5.333913359998136]]],
                                       [[[1.7723171626458094, 1.984227178877041, 1.9770175344848195], [4.534945503632086, 4.955160713898438, 4.947951069506207]],
                                           [[1.7723171626458094, 1.984227178877041, 1.9770175344848195], [4.534945503632086, 4.955160713898438, 4.947951069506207]]]]);

        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS3, &1.0);
        assert_eq!(5, transform_cwt.len());

        assert_eq!(transform_cwt, vec![[[[-1.918121121931172, -1.076605693314393, 0.20610530541960267], [-4.386064882073675, -2.0386389423648508, 1.168138554470137]],
                                           [[-1.918121121931172, -1.076605693314393, 0.20610530541960267], [-4.386064882073675, -2.0386389423648508, 1.168138554470137]]],
                                       [[[-1.626938220550193, -0.8420821530494805, 0.15871834584063874], [-3.687040123586735, -1.5926825272170322, 0.9093187200082654]],
                                           [[-1.626938220550193, -0.8420821530494805, 0.15871834584063874], [-3.687040123586735, -1.5926825272170322, 0.9093187200082654]]],
                                       [[[-1.3916539361654283, -0.6710947145753986, 0.1206028509125084], [-3.135875344621807, -1.2648678886912894, 0.7143760250284721]],
                                           [[-1.3916539361654283, -0.6710947145753986, 0.1206028509125084], [-3.135875344621807, -1.2648678886912894, 0.7143760250284721]]],
                                       [[[-1.1434155190003565, -0.5941463857160402, 0.11489685950719453], [-2.5888197529037837, -1.1259288196334323, 0.646679293424657]],
                                           [[-1.1434155190003565, -0.5941463857160402, 0.11489685950719453], [-2.5888197529037837, -1.1259288196334323, 0.646679293424657]]],
                                       [[[-1.0066588000531889, -0.5085781792429187, 0.10613836577988467], [-2.2620782773137416, -0.9696155880099893, 0.5671757745470192]],
                                           [[-1.0066588000531889, -0.5085781792429187, 0.10613836577988467], [-2.2620782773137416, -0.9696155880099893, 0.5671757745470192]]]]);
    }

    #[test]
    fn test_ff_1d_real() {
        let n: Vec<f64> = vec![1.0, 2.0, 3.0];
        let fft = fft_real1_d(&n);

        assert_eq!(3, fft.len());
        assert_eq!(fft[0], Complex::new(6.0, 0.0));
        assert_eq!(fft[1], Complex::new(-1.5000000000000009, 0.8660254037844382));
        assert_eq!(fft[2], Complex::new(-1.4999999999999987, -0.8660254037844404));
    }

    #[test]
    fn test_ff_2d_real() {
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];
        let fft = fft_real2_d(&n);

        assert_eq!(2, fft.len());
        assert_eq!(fft[0], [Complex::new(21.0, 0.0), Complex::new(-3.0000000000000027, 1.7320508075688756), Complex::new(-2.9999999999999964, -1.7320508075688823)]);
        assert_eq!(fft[1], [Complex::new(-9.0, -1.83697019872103e-15), Complex::new(8.881784197001252e-16, 8.881784197001252e-16), Complex::new(-8.881784197001252e-16, 1.7763568394002505e-15)]);

        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0], vec![7.0, 8.0, 9.0]];
        let fft = fft_real2_d(&n);

        assert_eq!(3, fft.len());
        assert_eq!(fft[0], [Complex::new(45.0, 0.0), Complex::new(-4.500000000000004, 2.5980762113533125), Complex::new(-4.499999999999993, -2.5980762113533267)]);
        assert_eq!(fft[1], [Complex::new(-13.500000000000007, 7.7942286340599445), Complex::new(2.1094237467877974e-15, 1.1102230246251565e-15), Complex::new(8.881784197001252e-16, 4.6629367034256575e-15)]);
        assert_eq!(fft[2], [Complex::new(-13.49999999999999, -7.794228634059962), Complex::new(0.0, 2.220446049250313e-15), Complex::new(-4.884981308350689e-15, 2.4424906541753444e-15)]);
    }
}