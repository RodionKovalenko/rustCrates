#[cfg(test)]
mod tests {
    use std::time::Instant;
    use num::Complex;
    use crate::neural_networks::utils::image::{get_pixel_separate_rgba, save_image_from_pixels};
    use crate::uphold_api::file_utils::remove_dir_contents;
    use crate::utils::array::arange;
    use crate::utils::data_converter::{convert_c_to_f64_3d, convert_to_c_array_f64_2d, convert_to_c_array_f64_3d, convert_to_f64_2d, convert_to_f64_3d, convert_to_f64_4d, convert_to_f64_5d, convert_to_f64_6d};
    use crate::wavelet_transform::cwt::{cwt, cwt_1d, cwt_2d, cwt_3d, cwt_4d, cwt_5d};
    use crate::wavelet_transform::cwt_complex::CWTComplex;
    use crate::wavelet_transform::cwt_types::ContinuousWaletetType;
    use crate::wavelet_transform::dwt::{get_ll_hl_lh_hh, insert_padding_after, insert_padding_before, transform_2_d, transform_2_df64};
    use crate::wavelet_transform::dwt_types::DiscreteWaletetType;
    use crate::wavelet_transform::fft::{fft_real1_d, fft_real2_d};
    use crate::wavelet_transform::modes::WaveletMode;

    #[test]
    fn test_cwt_1d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<f64> = vec![1.0, 2.0, 3.0];

        let (transform_cwt, frequencies) = cwt_1d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[-0.6741036008683479, 0.7022069072276176, 2.338346801509016], [0.5041676273332006, 2.2319236872210295, 2.9105329266128557],
            [1.460179610558491, 2.4175328751444094, 2.675897039667083], [1.7607301611537154, 2.297982166749601, 2.4488656217970295],
            [1.7858211471952243, 2.178264061974967, 2.2711671380635456]]);

        assert_eq!(5, frequencies.len());
        assert_eq!(frequencies[0], 0.25);
        assert_eq!(frequencies[1], 0.125);
        assert_eq!(frequencies[2], 0.08333333333333333);
        assert_eq!(frequencies[3], 0.0625);
        assert_eq!(frequencies[4], 0.05);


        let n: Vec<f64> = vec![1.0, 2.0, 3.0];
        let (transform_cwt, _frequencies) = cwt_1d(&n, &scales, &ContinuousWaletetType::MORL, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[0.13312470485893552, -0.013558458032945031, -0.497033497094481], [0.21189430390666375, -0.5223899955998024, 0.5322270915771569],
            [-0.9610723741385154, -0.06351489432282655, 1.3486265189684281], [-1.0312340410535685, 0.7492048325344391, 1.7572443706334928],
            [-0.4331415046766774, 1.1982045190688189, 1.9120855694052248]]
        );
    }

    #[test]
    fn test_cwt_2d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];

        let (transform_cwt, frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[-0.6741036008683479, 0.7022069072276176, 2.338346801509016], [-0.5880687745525268, 2.9826221887800872, 4.61876208306147]],
            [[0.5041676273332006, 2.2319236872210295, 2.9105329266128557], [2.29394940812488, 6.0887661475964485, 6.767375386988238]],
            [[1.460179610558491, 2.4175328751444094, 2.675897039667083], [4.193716699819857, 6.237605311253033, 6.49596947577568]],
            [[1.7607301611537154, 2.297982166749601, 2.4488656217970295], [4.70817226944409, 5.858118008159578, 6.009001463206988]],
            [[1.7858211471952243, 2.178264061974967, 2.2711671380635456], [4.684000094400078, 5.515337462003854, 5.60824053809242]]]);

        assert_eq!(5, frequencies.len());
        assert_eq!(frequencies[0], 0.25);
        assert_eq!(frequencies[1], 0.125);
        assert_eq!(frequencies[2], 0.08333333333333333);
        assert_eq!(frequencies[3], 0.0625);
        assert_eq!(frequencies[4], 0.05);

        let scales: Vec<f64> = (2..5).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0, 4.0], vec![5.0, 6.0, 7.0, 8.0]];
        let (transform_cwt, frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(3, transform_cwt.len());
        assert_eq!(transform_cwt, [[[-0.558114037997864, 1.642401145315221, 3.7198728120350353, 4.048766444594858],
            [0.7659800043933079, 6.195335217243305, 9.67166931129106, 8.601700516522865]], [[1.1168209595697607, 2.83887182730035, 4.029221458574006, 4.054589256408923],
            [4.41817842759619, 8.353640694267792, 10.47597579229239, 9.569358123376286]],
            [[2.039363014966221, 3.1639287554706317, 3.8299702779159954, 3.8520642161139316],
                [6.247918679832553, 8.776723132738296, 9.957922722581575, 9.464858593381535]]]);

        assert_eq!(3, frequencies.len());
        assert_eq!(frequencies[0], 0.125);
        assert_eq!(frequencies[1], 0.08333333333333333);
        assert_eq!(frequencies[2], 0.0625);

        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0, 4.0], vec![5.0, 6.0, 7.0, 8.0]];
        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MORL, &1.0);

        assert_eq!(3, transform_cwt.len());
        assert_eq!(transform_cwt, [[[-0.09947654027475547, 0.45993476906792014, -0.8706499926663313, 0.7802675567384295],
            [-0.12504261392147678, 1.4520966297129454, -2.2636899809324458, 1.77242941738352]],
            [[-0.061172898460163445, -0.831887659195214, -0.10585815720473662, 1.4778112339117353],
                [-0.014332713417933105, -0.3151487994220083, -0.27523120873237833, 1.9945500936849645]],
            [[-1.4767664095384354, -0.7892305978602576, 1.2486747208906972, 1.999247813826778],
                [-2.4617944317053873, 0.17878317491298645, 3.2465542743157285, 2.9672615865999186]]]);


        let scales: Vec<f64> = (5..10).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];
        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS1, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[-1.4216653038852611, -0.7393737274981087, 0.14658689502995653],
            [-3.2146272846066832, -1.4038441943941273, 0.8110573619260287]],
            [[-1.1560698732988235, -0.5672717654504037, 0.10962876902902186],
                [-2.60055760939921, -1.0749471663099386, 0.6173041698886111]],
            [[-0.9646772370025861, -0.4469338806609764, 0.08195260644542347],
                [-2.162114126444151, -0.8435987459907481, 0.4786174717752469]], [[-0.7783743007784849, -0.39317802427909554, 0.07709615231992123],
                [-1.7552619293664133, -0.7458836567283336, 0.429801784769202]],
            [[-0.6778466554793292, -0.3346644187918919, 0.07048088030414235],
                [-1.518590524672426, -0.6385233931138856, 0.374339854626184]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS2, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[1.6700942181899914, 2.3615876047771596, 2.523194746810804], [4.561384024276974, 6.025174368468135, 6.18678151050176]],
            [[1.7868357485588526, 2.2556766081900266, 2.3855662232035684], [4.733982204966106, 5.736608731735226, 5.8664983467487515]],
            [[1.8210379202849565, 2.1416158215669374, 2.280396057986696], [4.747578810458321, 5.458124731232164, 5.596904967651912]],
            [[1.7721562564595632, 2.0852602368908406, 2.154267552745277], [4.604194460328158, 5.264906079117931, 5.333913394972357]],
            [[1.7723171725312423, 1.9842271917078327, 1.9770175477620415], [4.534945529929955, 4.9551607463102405, 4.947951102364439]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS3, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[-1.9181211352753174, -1.0766057008042136, 0.2061053068534548], [-4.386064912587019, -2.0386389565474237, 1.1681385625967462]],
            [[-1.6269382318686123, -0.8420821589077471, 0.15871834694482373], [-3.687040149237046, -1.5926825382971352, 0.9093187263342869]],
            [[-1.3916539458470032, -0.6710947192441267, 0.12060285175152934], [-3.1358753664377286, -1.2648678974908303, 0.7143760299983092]],
            [[-1.1434155269549662, -0.5941463898494467, 0.11489686030651855], [-2.5888197709139025, -1.1259288274663848, 0.6466792979235295]],
            [[-1.0066588070563949, -0.5085781827810378, 0.10613836651827668], [-2.262078293050756, -0.9696155947554921, 0.5671757784927962]]]
        );

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS4, &1.0);
        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[1.095434266190033, 2.13864110075288, 2.4286686156254307], [3.332695961474649, 5.564123388036617, 5.854150902909138]],
            [[1.3807367430535813, 2.1192398090882523, 2.3327838680403805], [3.8744794053893274, 5.458257566934729, 5.671801625886834]],
            [[1.5253239016032225, 2.0556634621639387, 2.251219519166433], [4.127368548539042, 5.285825698161719, 5.481381755164195]],
            [[1.5674509110685702, 2.0237993282084616, 2.138570270490873], [4.175494221811977, 5.145576527232964, 5.260347469515359]],
            [[1.6163299781752827, 1.944589177311998, 1.9722032597057833], [4.211858065605014, 4.8821835050753375, 4.909797587469107]]]);


        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS5, &1.0);
        assert_eq!(transform_cwt, [[[-2.092980831524615, -1.273462794165842, 0.23446362979975996], [-4.847979221423958, -2.404407612139992, 1.365408447774]],
            [[-1.857124307512157, -1.0160426234102375, 0.18641417949599684], [-4.243262858212043, -1.917885225589866, 1.0882567816757143]],
            [[-1.63035605875512, -0.8192663938192063, 0.14412761642374858], [-3.695002392345004, -1.5418119015013751, 0.866673124106009]],
            [[-1.3649044857956598, -0.7300367124342381, 0.13914533213571537], [-3.1034048407473964, -1.3819232458616586, 0.7910318655632225]],
            [[-1.2151911970361282, -0.6284701439531433, 0.12993522578729744], [-2.739315969803032, -1.1972741712584298, 0.6987392530926666]]]);


        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS6, &1.0);
        assert_eq!(transform_cwt, [[[0.5932340127457231, 1.908231939253946, 2.3161355044722067], [2.242559886422992, 5.0765075220485665, 5.484411087266788]],
            [[1.0009666113962954, 1.9681098605181024, 2.2603074503818124], [3.0590375505175746, 5.139422843693044, 5.431620433556723]],
            [[1.2357544503462277, 1.952857801889467, 2.2021746217130307], [3.5102670065930845, 5.069132119591345, 5.318448939414881]],
            [[1.3581807698445318, 1.9448578367242664, 2.1037454874177577], [3.728512370724572, 4.981310329830789, 5.140197980524256]],
            [[1.4511183000073418, 1.8876356647178423, 1.9496209672718445], [3.8615507580121085, 4.7655781387101115, 4.827563441264092]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS7, &1.0);
        assert_eq!(transform_cwt, [[[-2.1088449165038043, -1.3980741481437484, 0.246383449064558], [-4.9582661327847735, -2.631417346049923, 1.47972664697083]],
            [[-1.9642534257028181, -1.1385721596555554, 0.2028961165960498], [-4.528815825402292, -2.144673366844204, 1.2089973237847995]],
            [[-1.7721534649857629, -0.9291158031538983, 0.15980424983579017], [-4.041388470042263, -1.7458058428961094, 0.9764942895781024]],
            [[-1.51277047210196, -0.8333882709893617, 0.1564592091183383], [-3.4550081360480664, -1.5757738810700856, 0.8988448191991614]],
            [[-1.3624380457551954, -0.7215986621916444, 0.14775231189378712], [-3.0813846982869397, -1.3736118927556649, 0.7997655424579029]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS8, &1.0);
        assert_eq!(transform_cwt, [[[0.16976057102795125, 1.6871533741271565, 2.202939664838769], [1.3120444017973945, 4.604723153351606, 5.120509444063174]],
            [[0.659385356611106, 1.818188034942759, 2.1844069439331637], [2.3194194579411995, 4.820134269099706, 5.186353178090073]],
            [[0.9654698734408681, 1.8480862308662886, 2.1486949766507286], [2.930135048760998, 4.845672136504055, 5.146280882288465]],
            [[1.157242349469327, 1.862797564306755, 2.0642951088925727], [3.2962578672384915, 4.808117069206254, 5.009614613792046]],
            [[1.289461135625813, 1.8269082514158468, 1.9225130901676923], [3.5162776066475154, 4.638974257603506, 4.734579096355326]]]);
    }

    #[test]
    fn test_cwt_3d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[[-0.6741036008683479, 0.7022069072276176, 2.338346801509016], [-0.5880687745525268, 2.9826221887800872, 4.61876208306147]],
            [[-0.6741036008683479, 0.7022069072276176, 2.338346801509016], [-0.5880687745525268, 2.9826221887800872, 4.61876208306147]]],
            [[[0.5041676273332006, 2.2319236872210295, 2.9105329266128557], [2.29394940812488, 6.0887661475964485, 6.767375386988238]],
                [[0.5041676273332006, 2.2319236872210295, 2.9105329266128557], [2.29394940812488, 6.0887661475964485, 6.767375386988238]]],
            [[[1.460179610558491, 2.4175328751444094, 2.675897039667083], [4.193716699819857, 6.237605311253033, 6.49596947577568]],
                [[1.460179610558491, 2.4175328751444094, 2.675897039667083], [4.193716699819857, 6.237605311253033, 6.49596947577568]]],
            [[[1.7607301611537154, 2.297982166749601, 2.4488656217970295], [4.70817226944409, 5.858118008159578, 6.009001463206988]],
                [[1.7607301611537154, 2.297982166749601, 2.4488656217970295], [4.70817226944409, 5.858118008159578, 6.009001463206988]]],
            [[[1.7858211471952243, 2.178264061974967, 2.2711671380635456], [4.684000094400078, 5.515337462003854, 5.60824053809242]],
                [[1.7858211471952243, 2.178264061974967, 2.2711671380635456], [4.684000094400078, 5.515337462003854, 5.60824053809242]]]]
        );

        let scales = vec![1.0, 2.0, 3.0];
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS1, &1.0);
        assert_eq!(3, transform_cwt.len());

        assert_eq!(transform_cwt, [[[[-1.2395610951413416, -1.5060022173635126, -0.24828910344193833], [-3.9189852326077523, -2.449287052804676, 0.6949957319992439]],
            [[-1.2395610951413416, -1.5060022173635126, -0.24828910344193833], [-3.9189852326077523, -2.449287052804676, 0.6949957319992439]]],
            [[[-2.3112287056301435, -1.8314240710405, 0.23981896444522327], [-5.696251758984163, -3.384856347654761, 1.7932512410595332]],
                [[-2.3112287056301435, -1.8314240710405, 0.23981896444522327], [-5.696251758984163, -3.384856347654761, 1.7932512410595332]]],
            [[[-2.2095925735270523, -1.3341119762132387, 0.228969014649697], [-5.133557860901942, -2.5064227193604114, 1.4012797577969267]],
                [[-2.2095925735270523, -1.3341119762132387, 0.228969014649697], [-5.133557860901942, -2.5064227193604114, 1.4012797577969267]]]]);

        let scales: Vec<f64> = (5..10).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS2, &1.0);
        assert_eq!(5, transform_cwt.len());

        assert_eq!(transform_cwt, [[[[1.6700942181899914, 2.3615876047771596, 2.523194746810804], [4.561384024276974, 6.025174368468135, 6.18678151050176]],
            [[1.6700942181899914, 2.3615876047771596, 2.523194746810804], [4.561384024276974, 6.025174368468135, 6.18678151050176]]],
            [[[1.7868357485588526, 2.2556766081900266, 2.3855662232035684], [4.733982204966106, 5.736608731735226, 5.8664983467487515]],
                [[1.7868357485588526, 2.2556766081900266, 2.3855662232035684], [4.733982204966106, 5.736608731735226, 5.8664983467487515]]],
            [[[1.8210379202849565, 2.1416158215669374, 2.280396057986696], [4.747578810458321, 5.458124731232164, 5.596904967651912]],
                [[1.8210379202849565, 2.1416158215669374, 2.280396057986696], [4.747578810458321, 5.458124731232164, 5.596904967651912]]],
            [[[1.7721562564595632, 2.0852602368908406, 2.154267552745277], [4.604194460328158, 5.264906079117931, 5.333913394972357]],
                [[1.7721562564595632, 2.0852602368908406, 2.154267552745277], [4.604194460328158, 5.264906079117931, 5.333913394972357]]],
            [[[1.7723171725312423, 1.9842271917078327, 1.9770175477620415], [4.534945529929955, 4.9551607463102405, 4.947951102364439]],
                [[1.7723171725312423, 1.9842271917078327, 1.9770175477620415], [4.534945529929955, 4.9551607463102405, 4.947951102364439]]]]
        );

        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS3, &1.0);
        assert_eq!(5, transform_cwt.len());

        assert_eq!(transform_cwt, [[[[-1.9181211352753174, -1.0766057008042136, 0.2061053068534548], [-4.386064912587019, -2.0386389565474237, 1.1681385625967462]],
            [[-1.9181211352753174, -1.0766057008042136, 0.2061053068534548], [-4.386064912587019, -2.0386389565474237, 1.1681385625967462]]],
            [[[-1.6269382318686123, -0.8420821589077471, 0.15871834694482373], [-3.687040149237046, -1.5926825382971352, 0.9093187263342869]],
                [[-1.6269382318686123, -0.8420821589077471, 0.15871834694482373], [-3.687040149237046, -1.5926825382971352, 0.9093187263342869]]],
            [[[-1.3916539458470032, -0.6710947192441267, 0.12060285175152934], [-3.1358753664377286, -1.2648678974908303, 0.7143760299983092]],
                [[-1.3916539458470032, -0.6710947192441267, 0.12060285175152934], [-3.1358753664377286, -1.2648678974908303, 0.7143760299983092]]],
            [[[-1.1434155269549662, -0.5941463898494467, 0.11489686030651855], [-2.5888197709139025, -1.1259288274663848, 0.6466792979235295]],
                [[-1.1434155269549662, -0.5941463898494467, 0.11489686030651855], [-2.5888197709139025, -1.1259288274663848, 0.6466792979235295]]],
            [[[-1.0066588070563949, -0.5085781827810378, 0.10613836651827668], [-2.262078293050756, -0.9696155947554921, 0.5671757784927962]],
                [[-1.0066588070563949, -0.5085781827810378, 0.10613836651827668], [-2.262078293050756, -0.9696155947554921, 0.5671757784927962]]]]);
    }

    #[test]
    fn test_cwt_4d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<Vec<f64>>>> = vec![vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]], vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]]];
        let (transform_cwt, _frequencies) = cwt_4d(&n, &scales, &ContinuousWaletetType::GAUS5, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[[[-0.16575507080401491, 0.20081903649487995, -0.8172621805651346], [-1.2024735899432866, 0.9643799492898887, -1.580823093360145]]],
            [[[-0.16575507080401491, 0.20081903649487995, -0.8172621805651346], [-1.2024735899432866, 0.9643799492898887, -1.580823093360145]]]],
            [[[[-0.42596691536291353, -1.469086424356554, -0.12258796280127819], [-2.1069836024948616, -2.478960270522978, 0.8872858833651764]]],
                [[[-0.42596691536291353, -1.469086424356554, -0.12258796280127819], [-2.1069836024948616, -2.478960270522978, 0.8872858833651764]]]],
            [[[[-1.8299265234136464, -1.8159083750526581, 0.2142121926462251], [-4.754019087309044, -3.338498800826774, 1.736802618420411]]],
                [[[-1.8299265234136464, -1.8159083750526581, 0.2142121926462251], [-4.754019087309044, -3.338498800826774, 1.736802618420411]]]],
            [[[[-2.229078516589987, -1.5304506663124915, 0.23160135413500216], [-5.316493340245636, -2.851989681648061, 1.5531403694706585]]],
                [[[-2.229078516589987, -1.5304506663124915, 0.23160135413500216], [-5.316493340245636, -2.851989681648061, 1.5531403694706585]]]],
            [[[[-2.092980831524615, -1.273462794165842, 0.23446362979975996], [-4.847979221423958, -2.404407612139992, 1.365408447774]]],
                [[[-2.092980831524615, -1.273462794165842, 0.23446362979975996], [-4.847979221423958, -2.404407612139992, 1.365408447774]]]]])
    }

    #[test]
    fn test_cwt_5d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let array: Vec<Vec<Vec<Vec<Vec<f64>>>>> = vec![
            vec![
                vec![
                    vec![
                        vec![0.64628843, 0.82996726, 0.87006796, 0.48253978],
                        vec![0.43919335, 0.06566719, 0.06158033, 0.81224427],
                        vec![0.88918919, 0.02075738, 0.58363584, 0.37932007],
                    ],
                ],
                vec![
                    vec![
                        vec![0.19943944, 0.37560552, 0.09522572, 0.62038108],
                        vec![0.6841884, 0.01350215, 0.27384274, 0.69728249],
                        vec![0.53189142, 0.99672615, 0.03854367, 0.30125334],
                    ],
                ],
                vec![
                    vec![
                        vec![0.68961004, 0.59868674, 0.00769092, 0.51516282],
                        vec![0.8776632, 0.70469546, 0.40765667, 0.37929271],
                        vec![0.43646761, 0.13832165, 0.15463361, 0.37499216],
                    ],
                ],
            ],
            vec![
                vec![
                    vec![
                        vec![0.41296786, 0.42958691, 0.1443393, 0.9200188],
                        vec![0.03331772, 0.86528934, 0.18012958, 0.35431852],
                        vec![0.7720741, 0.410375, 0.37368207, 0.82489805],
                    ],
                ],
                vec![
                    vec![
                        vec![0.13901775, 0.80671067, 0.04599183, 0.5085041],
                        vec![0.69940342, 0.68145641, 0.73054897, 0.34058879],
                        vec![0.19212236, 0.19808242, 0.38803242, 0.66113789],
                    ],
                ],
                vec![
                    vec![
                        vec![0.06598777, 0.37103162, 0.06875532, 0.06488421],
                        vec![0.71048144, 0.97461436, 0.14561172, 0.56559529],
                        vec![0.02740725, 0.95295214, 0.76303086, 0.96808568],
                    ],
                ],
            ],
        ];

        let (transform_cwt, _frequencies) = cwt_5d(&array, &scales, &ContinuousWaletetType::GAUS8, &1.0);
        assert_eq!(transform_cwt, [[[[[[0.016835246294030985, -0.051892509314235814, -0.020318355583590363, -0.050795250350206045],
            [-0.0372274839619018, -0.07617363822886125, 0.16372373099822962, -0.10027993765385672],
            [-0.11272981209649838, -0.028447549312357892, 0.11557445942495262, -0.13347573357052703]]],
            [[[0.030202930904502573, -0.07143255886208824, 0.06619270981027016, -0.03035829210747902],
                [-0.07912072070255327, -0.062109185662785206, 0.16517030372023517, -0.12744644649431475],
                [0.08417223245788846, -0.16818324173889687, 0.008261711772390552, 0.0845746247988685]]],
            [[[0.012917375462856498, -0.1553502468384199, 0.10633879744264707, 0.002715430971252049],
                [-0.00785888213532971, -0.12462644867789358, 0.060106256840453794, -0.017528920230043155],
                [-0.031537542134157256, -0.05350978459023566, 0.08385963592278484, -0.05340908726218699]]]],
            [[[[0.014204387212638447, -0.10440761531166146, 0.12793356082282734, -0.06792604775448445],
                [0.11308274810060212, -0.08341788200955336, -0.055899840446994066, 0.06460175168082545],
                [-0.035717258527588995, -0.10427678480106359, 0.14304593780455582, -0.09874900341988055]]],
                [[[0.09922502831440898, -0.11336481086837924, 0.0013247085444894821, 0.050097270519915374],
                    [-0.004850826789641549, -0.05605339153629816, -0.002373253967289119, -0.044048241005810077],
                    [-0.005355098830323325, -0.011956022226400213, 0.05871045986075662, -0.09056378836825377]]],
                [[[0.04308096800856509, -0.03908565285108765, -0.028075453591896296, 0.03582678804047332],
                    [0.05875733141974109, -0.17982080973878112, 0.06197938824575268, 0.03518064993937872],
                    [0.1054080299044562, -0.033259922882741724, -0.04088932608281541, -0.049576279879686894]]]]],
            [[[[[-0.05821917415283797, 0.09839816959195548, 0.013302758698762254, 0.08964121531453112],
                [0.2174860180357677, 0.19153434682921827, -0.5467081056895328, 0.28032508081166774],
                [0.3651705383662257, 0.04439735386071902, -0.4022851461263083, 0.3626470635149795]]],
                [[[-0.02657900066954815, 0.18419360884377917, -0.23436331006859895, 0.0668507832273698],
                    [0.32104529698492235, 0.1451419547244948, -0.5565921221165872, 0.3537341002259267],
                    [-0.25668833099823185, 0.4921998665836902, -0.060293733632625954, -0.3205235648206001]]],
                [[[0.005531599365421786, 0.44548118782934837, -0.3717365873318388, -0.06373755196489866],
                    [0.027664768997667056, 0.34180890347160325, -0.23458308048214352, -0.015427011423122807],
                    [0.13356796299631557, 0.1383597913347422, -0.28726590433753457, 0.13606385541129282]]]],
                [[[[0.05806368126576227, 0.26842407842008065, -0.4422809245018003, 0.16848062836036312],
                    [-0.3372070354806297, 0.22833912471139972, 0.15204738315396624, -0.23295393381894983],
                    [0.18638429600719564, 0.26244304556268483, -0.49905082685059066, 0.2465280921185047]]],
                    [[[-0.26606340348622753, 0.31757824309743554, -0.031497362565966136, -0.1913583346152463],
                        [0.00020315945757035136, 0.12306791019425353, -0.0370201619228945, 0.07329011040385026],
                        [0.08091966974996312, -0.00931845377861757, -0.2132281168778391, 0.2562029258969805]]],
                    [[[-0.13978623577939958, 0.11207084460595185, 0.07907580137754928, -0.12664360610365602],
                        [-0.14777117692299607, 0.5111875986615858, -0.24104188822919956, -0.17848484305553475],
                        [-0.25957498598676115, 0.02556730078038244, 0.08097836600325664, 0.1077753745081995]]]]],
            [[[[[-0.24947159385044523, 0.2516029510689121, 0.47897276844226416, 0.14345162679164902],
                [0.1450264819787304, -0.11485525637049972, -0.22215543449351866, 0.18822909394303514],
                [0.1461191361547272, 0.11259982550584516, -0.021448619842263657, 0.06040124963961399]]],
                [[[-0.0383172648645783, -0.017195372075942128, 0.020516412037778268, 0.14564571393595654],
                    [0.17920537111703277, -0.03419643784107886, -0.18229534000236475, 0.14566443183338734],
                    [-0.009203785129102325, 0.5287746190784478, 0.2594612143619589, -0.28272833489528765]]],
                [[[0.15724580454278975, 0.3489647767262717, -0.006506341370275355, -0.17794451505266515],
                    [0.05877430127152633, 0.4396816568558438, 0.19879209019449745, -0.1617354863496006],
                    [0.09388208983404482, 0.06551064019358156, -0.05386399637831117, 0.025724543060373414]]]],
                [[[[0.020357137570315764, -0.030575014315981162, -0.04876096493687967, 0.19967585747690925],
                    [-0.24947002357900028, 0.20672971806415213, 0.362310644547925, 0.024698837806394546],
                    [0.08936185457769008, 0.10157386166218195, -0.017075228093094197, 0.12102906405791758]]],
                    [[[-0.13964281495906106, 0.19629223694720568, 0.22226223063505524, 0.0049116919230184596],
                        [-0.13851751086504954, 0.29707278502147877, 0.37517854250883814, 0.03489380177127299],
                        [-0.11692529109555476, -0.17708359692086034, 0.06252793664484216, 0.3307053739069603]]],
                    [[[-0.08100552766573481, 0.1467129900700878, 0.15953591251617014, -0.05056426178739998],
                        [0.02886019387114157, 0.4687999227610073, 0.19793894828405142, -0.18850251436976348],
                        [-0.5027777163446956, -0.12710355999811185, 0.5152870644985503, 0.5204615354189225]]]]],
            [[[[[-0.16271485135522024, 0.48896617756302513, 0.7608065103984833, 0.3763782369815869],
                [-0.08055091278681817, -0.06419294360763206, 0.07181139561956384, 0.22950971491396505],
                [0.06679583623147495, 0.2730972736582505, 0.2815271234325073, 0.10926677944888552]]],
                [[[-0.13410244008824235, 0.034760504046128016, 0.21716904969847586, 0.24859998008367287],
                    [-0.012818338341236496, 0.06374645133624035, 0.14376106642047665, 0.18510683132292816],
                    [0.13898366960904085, 0.5653408544986456, 0.46516434184178007, -0.025816693179426142]]],
                [[[0.14755531895945362, 0.38394172939444493, 0.2815865192199708, -0.006172726310457066],
                    [0.13255975133479092, 0.5660982410309692, 0.5044072334027097, 0.0447682531548631],
                    [0.0222609214721341, 0.1220037387825034, 0.1389633233503506, 0.08027128080401322]]]],
                [[[[-0.15013806722376044, 0.04709713074464805, 0.2689714502546827, 0.3270572774554621],
                    [-0.1480590042203475, 0.2718015845706706, 0.4639453702845635, 0.23392226934227286],
                    [-0.04407883330509216, 0.23282300710706633, 0.36459545010944555, 0.25901477926795424]]],
                    [[[-0.10298755832004503, 0.23636953175748082, 0.38264076266598634, 0.2046764132001932],
                        [-0.047922703700476244, 0.4953989568394408, 0.6332108830889237, 0.23215815883070912],
                        [-0.25557860976264957, -0.057049796092723704, 0.2682120829504205, 0.3953770978097791]]],
                    [[[-0.010734276800769604, 0.16985811683536645, 0.194762422579652, 0.04011554122798072],
                        [0.09715798208365345, 0.5421216044300603, 0.5081079837464432, 0.07394985210545335],
                        [-0.5460381724163426, 0.09852058009815812, 0.7661101458845513, 0.7625407295463308]]]]],
            [[[[[0.06166769721545288, 0.6502933974713624, 0.8691095997073203, 0.5637348673174839],
                [-0.11013227987770073, 0.06891584649617, 0.2427150872015538, 0.2886192254275444],
                [0.12685037623511225, 0.39316709958049423, 0.44101013587208293, 0.236608434653881]]],
                [[[-0.09910506447341605, 0.13767036780387915, 0.3179202737271902, 0.3144595988248416],
                    [-0.015229377202444666, 0.20119866984738216, 0.3281742312261416, 0.2760873081278678],
                    [0.25568082496532946, 0.5780988948194234, 0.5514469942251995, 0.19450735369315167]]],
                [[[0.18924132129880902, 0.4359858965825331, 0.4321204416647678, 0.18034089286623198],
                    [0.25822135641552063, 0.6421622933919224, 0.6475848471781471, 0.27064131620556914],
                    [0.03852738109845998, 0.19117840477911754, 0.2436935445676624, 0.15900631326378054]]]],
                [[[[-0.11887079926634583, 0.20044269405278467, 0.43833083698164144, 0.4269327603489499],
                    [-0.013415322547802519, 0.3316251121888325, 0.487782796903607, 0.34488317650545486],
                    [0.017686940261365316, 0.3920391210149865, 0.5647043002921915, 0.41383547127725007]]],
                    [[[-0.009493712808880199, 0.3025258450021872, 0.4483087706056897, 0.3249896457234569],
                        [0.13670195816844052, 0.6157082839258299, 0.7374524911492241, 0.4160360617247501],
                        [-0.19681893175969742, 0.0990364046115716, 0.37029360492854235, 0.42556876757729845]]],
                    [[[0.04797241430528485, 0.17792183112975613, 0.20029837906655698, 0.09931380050247184],
                        [0.21203643894264815, 0.6105667082470013, 0.6537253213865085, 0.31103449450218945],
                        [-0.32679969090552224, 0.3424247587423611, 0.8553506858689742, 0.8501030954043842]]]]]])
    }

    #[test]
    fn test_cwt_generic() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();

        let data_1d: Vec<i32> = vec![1, 2, 3];
        let data_2d: Vec<Vec<i64>> = vec![vec![1, 2], vec![3, 4]];
        let data_3d: Vec<Vec<Vec<i32>>> = vec![vec![vec![1, 2], vec![3, 4]], vec![vec![5, 6], vec![7, 8]]];
        let data_4d: Vec<Vec<Vec<Vec<i32>>>> = vec![vec![vec![vec![1, 2], vec![3, 4]], vec![vec![5, 6], vec![7, 8]]], vec![vec![vec![9, 10], vec![11, 12]], vec![vec![13, 14], vec![15, 16]]]];
        let data_5d: Vec<Vec<Vec<Vec<Vec<i32>>>>> = vec![vec![vec![vec![vec![1, 2], vec![3, 4]], vec![vec![5, 6], vec![7, 8]]], vec![vec![vec![9, 10], vec![11, 12]], vec![vec![13, 14], vec![15, 16]]]],
                                                         vec![vec![vec![vec![17, 18], vec![19, 20]], vec![vec![21, 22], vec![23, 24]]], vec![vec![vec![25, 26], vec![27, 28]], vec![vec![29, 30], vec![31, 32]]]]];

        let mut wavelet = CWTComplex {
            scales: scales,
            cw_type: ContinuousWaletetType::GAUS1,
            sampling_period: 1.0,
            fc: 1.0,
            fb: 1.0,
            m: 1.0,
            frequencies: vec![],
        };

        let (transform_cwt, _frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_f64_2d(&transform_cwt);

        assert_eq!(result, [[-1.2395610951413416, -1.5060022173635126, -0.24828910344193833], [-2.3112287056301435, -1.8314240710405, 0.23981896444522327],
            [-2.2095925735270523, -1.3341119762132387, 0.228969014649697], [-1.8131979850419127, -0.9559156626454985, 0.16963613083352946],
            [-1.4216653038852611, -0.7393737274981087, 0.14658689502995653]]);

        wavelet.cw_type = ContinuousWaletetType::GAUS2;
        let (transform_cwt, _frequencies) = cwt(&data_2d, &mut wavelet).unwrap();
        let result = convert_to_f64_3d(&transform_cwt);

        assert_eq!(result, [[[-0.30602031200865504, 1.1416622879952905], [-0.23148652801887604, 2.6638786719890026]],
            [[0.5091909275725767, 1.701535799947972], [1.5855604551278137, 3.9702501998785973]], [[0.9951288296750808, 1.5950042258150352],
                [2.521925734621841, 3.7216765269017458]], [[1.1127227854184643, 1.4745016540441773], [2.7169461221849884, 3.4405038594364115]],
            [[1.1403920168801673, 1.3019991589138185], [2.714783753398275, 3.037998037465575]]]);

        wavelet.cw_type = ContinuousWaletetType::MORL;
        let (transform_cwt, _frequencies) = cwt(&data_3d, &mut wavelet).unwrap();
        let result = convert_to_f64_4d(&transform_cwt);

        assert_eq!(result, [[[[0.11408953074891337, -0.36938550831261857], [0.10505055872695773, -0.8618995193961178]], [[0.09601158670500198, -1.3544135304796168],
            [0.08697261468304651, -1.8469275415631161]]], [[[-0.5248492695941281, 0.5297678175828135], [-0.8731092666606404, 1.2361249076932088]],
            [[-1.2213692637271527, 1.9424819978036045], [-1.569629260793665, 2.648839087914]]], [[[-0.3847928004842247, 1.027348612807047],
            [-0.4271360633660916, 2.3971467632164254]], [[-0.46947932624795896, 3.7669449136258053], [-0.5118225891298256, 5.136743064035183]]],
            [[[0.12259253174245399, 1.1306320698415362], [0.6220624200987599, 2.6381414962969045]], [[1.1215323084550657, 4.145650922752273],
                [1.621002196811372, 5.653160349207641]]], [[[0.4206319969503044, 1.1345130472867395], [1.2194350096628606, 2.647197110335715]],
                [[2.0182380223754164, 4.159881173384692], [2.817041035087972, 5.672565236433667]]]]);

        wavelet.cw_type = ContinuousWaletetType::GAUS3;
        let (transform_cwt, _frequencies) = cwt(&data_4d, &mut wavelet).unwrap();
        let result = convert_to_f64_5d(&transform_cwt);

        assert_eq!(result, [[[[[-0.4095436540277341, -0.629975794758475], [-1.4490631028139465, -0.6299757947584685]], [[-2.4885825516001594, -0.6299757947584619],
            [-3.5281020003863715, -0.6299757947584554]]], [[[-4.567621449172584, -0.6299757947584492], [-5.607140897958796, -0.6299757947584421]],
            [[-6.6466603467450085, -0.6299757947584355], [-7.686179795531221, -0.6299757947584297]]]],
            [[[[-1.385373826978176, -0.39646679885023167], [-3.167214452806595, -0.39646679885020925]],
                [[-4.9490550786350145, -0.39646679885018665], [-6.730895704463433, -0.396466798850164]]],
                [[[-8.512736330291853, -0.3964667988501427], [-10.29457695612027, -0.3964667988501188]],
                    [[-12.076417581948691, -0.39646679885009745], [-13.858258207777109, -0.39646679885007485]]]],
            [[[[-1.23684729059004, -0.2416055927282371], [-2.7153001739083287, -0.24160559272821402]], [[-4.193753057226617, -0.2416055927281917],
                [-5.672205940544906, -0.24160559272816864]]],
                [[[-7.150658823863196, -0.24160559272814403], [-8.629111707181483, -0.2416055927281225]],
                    [[-10.107564590499772, -0.24160559272809787], [-11.58601747381806, -0.24160559272807633]]]],
            [[[[-0.9519371518191737, -0.169440296110134], [-2.0733145997484934, -0.16944029611011047]],
                [[-3.194692047677812, -0.16944029611008915], [-4.316069495607131, -0.16944029611006428]]],
                [[[-5.43744694353645, -0.16944029611004474], [-6.558824391465768, -0.16944029611002165]],
                    [[-7.680201839395089, -0.16944029611000033], [-8.801579287324408, -0.16944029610997546]]]],
            [[[[-0.7559279488898105, -0.11457244506097468], [-1.6264283428406052, -0.11457244506095482]],
                [[-2.4969287367914026, -0.11457244506093198], [-3.367429130742196, -0.11457244506091609]]],
                [[[-4.237929524692994, -0.11457244506089226], [-5.1084299186437905, -0.1145724450608724]],
                    [[-5.978930312594583, -0.11457244506085651], [-6.849430706545376, -0.11457244506083665]]]]]);

        wavelet.cw_type = ContinuousWaletetType::GAUS4;
        let (transform_cwt, _frequencies) = cwt(&data_5d, &mut wavelet).unwrap();
        let result = convert_to_f64_6d(&transform_cwt);

        assert_eq!(result, [[[[[[-0.2569349296421992, 0.39046695447394186], [-0.38371420779307963, 0.9110895604391881]],
            [[-0.51049348594396, 1.4317121664044343], [-0.6372727640948406, 1.9523347723696804]]],
            [[[-0.7640520422457209, 2.4729573783349266], [-0.8908313203966013, 2.9935799843001725]], [[-1.017610598547482, 3.514202590265419],
                [-1.1443898766983622, 4.034825196230665]]]],
            [[[[-1.2711691548492428, 4.5554478021959115], [-1.3979484330001228, 5.076070408161157]],
                [[-1.5247277111510036, 5.596693014126403], [-1.651506989301884, 6.1173156200916505]]],
                [[[-1.7782862674527642, 6.637938226056896], [-1.905065545603645, 7.158560832022142]],
                    [[-2.0318448237545255, 7.679183437987389], [-2.1586241019054055, 8.199806043952634]]]]],
            [[[[[-0.11178522401267409, 1.4397629973891843], [0.25635055110438365, 3.359446993908089]], [[0.6244863262214416, 5.279130990426994],
                [0.9926221013385, 7.198814986945898]]], [[[1.360757876455557, 9.118498983464804], [1.7288936515726148, 11.03818297998371]],
                [[2.097029426689673, 12.957866976502615], [2.4651652018067316, 14.877550973021515]]]],
                [[[[2.833300976923791, 16.797234969540423], [3.201436752040847, 18.71691896605933]],
                    [[3.569572527157904, 20.63660296257823], [3.9377083022749635, 22.556286959097132]]],
                    [[[4.3058440773920195, 24.475970955616045], [4.673979852509078, 26.39565495213495]],
                        [[5.042115627626136, 28.315338948653853], [5.410251402743195, 30.23502294517275]]]]],
            [[[[[0.5928407843309739, 1.4985288399667818], [1.6851911819842105, 3.496567293255819]],
                [[2.7775415796374476, 5.494605746544857], [3.8698919772906852, 7.492644199833893]]],
                [[[4.962242374943922, 9.490682653122931], [6.054592772597158, 11.488721106411969]], [[7.1469431702503945, 13.486759559701005],
                    [8.239293567903635, 15.484798012990042]]]],
                [[[[9.331643965556871, 17.48283646627908], [10.423994363210108, 19.480874919568116]],
                    [[11.516344760863344, 21.478913372857154], [12.608695158516582, 23.47695182614619]]],
                    [[[13.701045556169815, 25.47499027943523], [14.793395953823053, 27.473028732724266]],
                        [[15.885746351476293, 29.471067186013304], [16.978096749129524, 31.46910563930234]]]]],
            [[[[[0.8804074954281659, 1.4310422287369784], [2.2378290671019934, 3.3390985337196124]],
                [[3.5952506387758194, 5.247154838702246], [4.952672210449647, 7.15521114368488]]],
                [[[6.310093782123475, 9.063267448667514], [7.667515353797301, 10.97132375365015]],
                    [[9.024936925471128, 12.879380058632783], [10.382358497144956, 14.787436363615416]]]],
                [[[[11.739780068818781, 16.69549266859805], [13.09720164049261, 18.603548973580686]],
                    [[14.454623212166437, 20.511605278563316], [15.812044783840262, 22.419661583545953]]],
                    [[[17.16946635551409, 24.32771788852859], [18.526887927187918, 26.23577419351122]],
                        [[19.884309498861747, 28.143830498493855], [21.24173107053557, 30.051886803476492]]]]],
            [[[[[0.9968136716583007, 1.286841186530861], [2.4225744054935565, 3.0026294352386733]],
                [[3.8483351393288125, 4.718417683946486], [5.274095873164068, 6.434205932654299]]],
                [[[6.699856606999324, 8.14999418136211], [8.125617340834578, 9.865782430069924]],
                    [[9.551378074669834, 11.581570678777734], [10.977138808505089, 13.297358927485547]]]],
                [[[[12.402899542340347, 15.01314717619336], [13.828660276175599, 16.728935424901174]],
                    [[15.254421010010859, 18.444723673608983], [16.680181743846113, 20.160511922316797]]],
                    [[[18.10594247768137, 21.87630017102461], [19.53170321151662, 23.59208841973242]],
                        [[20.95746394535188, 25.307876668440237], [22.383224679187133, 27.023664917148047]]]]]]);
    }

    #[test]
    fn test_complex_cwt() {
        let scale = arange(&1.0, &3.0, &1.0);

        let mut wavelet = CWTComplex {
            scales: scale,
            cw_type: ContinuousWaletetType::CGAU1,
            sampling_period: 1.0,
            m: 1.0,
            fb: 1.5,
            fc: 1.0,
            frequencies: vec![0.0],
        };

        let data_1d = vec![1, 2, 3];
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();

        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: -0.7539309382537467, im: -0.20660629328041116 }, Complex { re: -0.8996749992471855, im: 0.03100951856389067 }, Complex { re: -0.3731375452609411, im: 0.7955459215923877 }],
            [Complex { re: -1.6630454106813366, im: -0.3253564390808993 }, Complex { re: -1.5788248947211585, im: 0.8328403534259957 }, Complex { re: 0.15111433618154138, im: 1.6100776507287728 }]]);
        assert_eq!(frequencies, [0.3, 0.15]);

        wavelet.cw_type = ContinuousWaletetType::CGAU2;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: 0.1975800079161206, im: -0.14366794301934255 }, Complex { re: 0.011834364706316436, im: -0.10780202792432093 }, Complex { re: -0.799741550397485, im: -0.49848000994956493 }], [Complex { re: 0.5495914780412967, im: -0.7293794878054979 }, Complex { re: -0.8524380899915001, im: -1.1517465517494845 }, Complex { re: -1.9714305654906998, im: 0.018083220814724354 }]]);
        assert_eq!(frequencies, [0.4, 0.2]);

        wavelet.cw_type = ContinuousWaletetType::CGAU3;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: 0.15580905605646045, im: 0.023477632482858515 }, Complex { re: 0.02311996064205535, im: 0.08435939895067132 }, Complex { re: 0.5982966844595858, im: -0.17577929484288857 }], [Complex { re: 0.6157193972147343, im: 0.632903531178201 }, Complex { re: 1.24152683191323, im: -0.21626764859081818 }, Complex { re: 0.04400037726591941, im: -1.2974526319158703 }]]);
        assert_eq!(frequencies, [0.5, 0.25]);

        wavelet.cw_type = ContinuousWaletetType::CGAU4;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);
        assert_eq!(result, [[Complex { re: 0.001099306694145083, im: 0.1171964410702254 }, Complex { re: -0.04458241218330426, im: -0.11413295217679564 }, Complex { re: 0.04715164428181236, im: 0.5164952244628431 }], [Complex { re: -0.629864097296805, im: 0.14623217107349645 }, Complex { re: 0.0657741341118853, im: 0.862010871478628 }, Complex { re: 1.2954722251372865, im: 0.15293677108473608 }]]);
        assert_eq!(frequencies, [0.5, 0.25]);

        wavelet.cw_type = ContinuousWaletetType::CGAU5;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: -0.1279675998535332, im: 0.03673583225138203 }, Complex { re: 0.08818397844039425, im: 0.027484402097013153 }, Complex { re: -0.5020887655762765, im: -0.16384287577565051 }], [Complex { re: -0.023863833028764218, im: -0.4298660420011176 }, Complex { re: -0.7680466758591481, im: -0.1834988163149279 }, Complex { re: -0.23468894768332627, im: 0.9462008531450352 }]]);
        assert_eq!(frequencies, [0.6, 0.3]);

        wavelet.cw_type = ContinuousWaletetType::CGAU6;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: -0.049091780037471285, im: -0.1195617509688047 }, Complex { re: -0.050363911196688524, im: 0.0167949707977382 }, Complex { re: 0.2518779632169532, im: -0.3813133193735203 }], [Complex { re: 0.31897905529406895, im: 0.1272637089307444 }, Complex { re: 0.2849632553003727, im: -0.48311146775601094 }, Complex { re: -0.8738710191582897, im: -0.3139003961603649 }]]);
        assert_eq!(frequencies, [0.6, 0.3]);

        wavelet.cw_type = ContinuousWaletetType::CGAU7;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: 0.12387609416270891, im: -0.06160202495565387 }, Complex { re: 0.0540917075444534, im: -0.061598579116619145 }, Complex { re: 0.3276325749438025, im: 0.3245096350844312 }], [Complex { re: -0.15278411588728819, im: 0.1282566034156457 }, Complex { re: 0.3465141413828615, im: 0.3659728317952695 }, Complex { re: 0.3867481182688814, im: -0.6675070939587349 }]]);
        assert_eq!(frequencies, [0.7, 0.35]);

        wavelet.cw_type = ContinuousWaletetType::CGAU8;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: 0.0766053184239858, im: 0.12197028564451548 }, Complex { re: 0.048339111819366315, im: 0.13560877652487657 }, Complex { re: -0.3633101221491256, im: 0.2295620132786386 }], [Complex { re: -0.02201995070211324, im: -0.14426308336102447 }, Complex { re: -0.40243903345004584, im: 0.14258296031136422 }, Complex { re: 0.5893797983054468, im: 0.4402814940342556 }]]);
        assert_eq!(frequencies, [0.7, 0.35]);


        let data_1d = vec![1.0, 0.0, 2.0, 3.0];

        wavelet.cw_type = ContinuousWaletetType::CMOR;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: -0.004341207903904784, im: -0.04792095170673179 }, Complex { re: 0.009888120380320968, im: -0.03900742171070909 },
            Complex { re: 0.008843541261772966, im: -0.14354137865436362 }, Complex { re: -0.03933261631675025, im: -0.03484465231455147 }],
            [Complex { re: 0.018158346044917232, im: -0.26244860575825796 }, Complex { re: 0.022844562479819492, im: 0.26068461379594915 },
                Complex { re: -0.06664009905986391, im: -0.11052301044784954 }, Complex { re: 0.06891862214051149, im: -0.12373587474793302 }]]);
        assert_eq!(frequencies, [1.0, 0.5]);


        wavelet.cw_type = ContinuousWaletetType::SHAN;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: 0.13868420276379032, im: -0.32873319962966796 }, Complex { re: -0.004301270536828675, im: 0.570377795584042 },
            Complex { re: -0.1679168593768328, im: -0.5253330931258519 }, Complex { re: 0.14014513702809056, im: -0.36523696290330016 }],
            [Complex { re: -0.047785714321184156, im: -0.1839579410891287 }, Complex { re: -0.21915699065710117, im: 0.438025450989463 },
                Complex { re: -0.12360071854899149, im: -0.9226717030002943 }, Complex { re: 0.5778384030083942, im: -0.4535657179965862 }]]
        );
        assert_eq!(frequencies, [0.275, 0.1375]);

        wavelet.cw_type = ContinuousWaletetType::FBSP;
        let (transformed, frequencies) = cwt(&data_1d, &mut wavelet).unwrap();
        let result = convert_to_c_array_f64_2d(transformed);

        assert_eq!(result, [[Complex { re: 0.1386842027637903, im: -0.32873319962966796 }, Complex { re: -0.004301270536828626, im: 0.570377795584042 },
            Complex { re: -0.1679168593768329, im: -0.5253330931258517 }, Complex { re: 0.14014513702809045, im: -0.3652369629033001 }],
            [Complex { re: -0.047785714321184225, im: -0.1839579410891287 }, Complex { re: -0.2191569906571012, im: 0.438025450989463 },
                Complex { re: -0.12360071854899161, im: -0.9226717030002941 }, Complex { re: 0.577838403008394, im: -0.4535657179965863 }]]);
        assert_eq!(frequencies, [0.275, 0.1375]);
    }

    #[test]
    fn test_dwt() {
        let data_2d = vec![vec![1.0, 2.0, 3.0, 4.0, 5.0], vec![6.0, 7.0, 8.0, 9.0, 10.0]];

        let dwt_type = DiscreteWaletetType::DB1;
        let transformed = transform_2_d(&data_2d, &dwt_type, &WaveletMode::CONSTANT);

        assert_eq!(transformed, [[8.0, 12.000000000000004, 15.000000000000004, -0.9999999999999998, -1.0000000000000004, 0.0],
            [-5.0, -5.000000000000001, -5.000000000000001, -4.440892098500626e-16, 3.3306690738754696e-16, 0.0]]);

        let llhllhhh: Vec<Vec<Vec<f64>>> = get_ll_hl_lh_hh(&transformed);

        assert_eq!(llhllhhh,
                   [[[8.0, 12.000000000000004, 15.000000000000004]],
                       [[-5.0, -5.000000000000001, -5.000000000000001]],
                       [[-0.9999999999999998, -1.0000000000000004, 0.0]],
                       [[-4.440892098500626e-16, 3.3306690738754696e-16, 0.0]]]);

        let data_2d = vec![vec![1.15, 2.22, 3.36, 4.45, 5.59], vec![6.61, 7.72, 8.83, 9.94, 10.17]];
        let dwt_type = DiscreteWaletetType::DB2;
        let transformed = transform_2_d(&data_2d, &dwt_type, &WaveletMode::CONSTANT);
        let llhllhhh: Vec<Vec<Vec<f64>>> = get_ll_hl_lh_hh(&transformed);

        assert_eq!(llhllhhh, [[[1.1055969296248855, 2.659056465474454, 7.315913630276377, 10.341801825333636],
            [9.290106548568122, 10.882806465474454, 15.449230777830874, 17.21180182533364]],
            [[-3.7267493523315185, -3.744617138124092, -3.7034392801983413, -3.128198174666365], [0.9985794793504406, 1.0033671381240925, 0.992333564346846, 0.838198174666366]],
            [[-0.7283235910246749, 0.02329246824526906, 0.8107842982524609, 1.3710127121807463e-15],
                [-0.7488139720814411, 0.0072876587736526175, 0.4722794887808437, 4.289572369704812e-16]],
            [[0.009330127018921996, 0.007287658773652618, 0.15413538968048013, 4.2895723697048124e-16],
                [-0.0025000000000000022, -0.0019527222831138048, -0.04130045318994102, -1.1493874523372615e-16]]]);

        let dwt_type = DiscreteWaletetType::DB3;
        let transformed = transform_2_d(&data_2d, &dwt_type, &WaveletMode::CONSTANT);
        let llhllhhh: Vec<Vec<Vec<f64>>> = get_ll_hl_lh_hh(&transformed);

        assert_eq!(llhllhhh, [[[2.625357908947451, 2.2648791841237403, 4.287629314819762, 9.094444333091051, 11.40816414879493],
            [0.9228015138955594, 0.5637793430510476, 2.5684057922326975, 7.439410601157797, 9.980273011430379],
            [10.706077720206409, 10.338685858977884, 12.447455103455843, 16.949610778562757, 18.18526018834853]],
            [[-2.5692197045015344, -2.5670217114160163, -2.594371007921061, -2.497506272365226, -2.154739811651468],
                [0.11077471373315051, 0.11067994486055843, 0.11185913965103955, 0.10768271077917824, 0.09290396044639859],
                [-0.27205318422898683, -0.27182044001611105, -0.2747164411590197, -0.26445949049758255, -0.2281641487949262]],
            [[-0.5038686623290554, 0.2727207320301005, 0.523692004572122, -0.24499844920738922, -9.342336671455288e-16],
                [-0.5009351428687248, 0.2771973027939089, 0.6182755679020582, -0.26905044679178314, -9.831839096476573e-16],
                [-0.5177918127684179, 0.25147390921545504, 0.07477690476047272, -0.13084219926147111, -7.019046849735028e-16]],
            [[0.00442678787200472, 0.0067553085750333905, 0.14273004720165777, -0.03629534170265468, -7.386770149999276e-17],
                [-0.0001908657941629005, -0.0002912625075493988, -0.006153961878846127, 0.001564913300296563, 3.1848866305402808e-18],
                [0.0004687500000000594, 0.0007153157065809476, 0.01511360190735345, -0.003843292679713447, -7.82180806473622e-18]]]);


        let _scale = arange(&1.0, &3.0, &1.0);
        let _data_1d = vec![1.0, 0.0, 2.0, 3.0];
        let data_2d = vec![vec![1.1515151515151515, 2.2626262626262626, 3.36363636363636363636, 4.454545454545454545, 5.5959595959595959],
                           vec![6.616161616161616161, 7.7272727272727272, 8.818181818181818181, 9.9191919191919191, 10.1313131313131313]];


        let dwt_type = DiscreteWaletetType::DB4;
        let mode = WaveletMode::SYMMETRIC;
        let transformed = transform_2_d(&data_2d, &dwt_type, &mode);
        assert_eq!(transformed, [
            [10.825626749849437, 6.745432828355063, 2.356790385209029, 4.445414851141745, 9.460976076794744, 10.825626749849437, 0.050103715123674335, 0.06491804986849077, 0.2856701317488374, -0.6013410686663525, 0.20064917192535203, 0.050103715123674335],
            [20.447850161982082, 17.59051584442521, 13.186045643284851, 15.496196141038325, 19.525959398727597, 20.447850161982082, 0.10420787549244984, 0.05524181426824209, -0.3463430158085348, 0.26155105382246907, -0.07465772777462679, 0.10420787549244984],
            [10.825626749849437, 6.745432828355063, 2.356790385209029, 4.445414851141745, 9.460976076794744, 10.825626749849437, 0.050103715123674335, 0.06491804986849077, 0.2856701317488374, -0.6013410686663525, 0.20064917192535203, 0.050103715123674335],
            [20.447850161982082, 17.59051584442521, 13.186045643284851, 15.496196141038325, 19.525959398727597, 20.447850161982082, 0.10420787549244984, 0.05524181426824209, -0.3463430158085348, 0.26155105382246907, -0.07465772777462679, 0.10420787549244984],
            [-0.561186275034653, -0.6325057608365245, -0.6315826560435318, -0.644502473355604, -0.5870088706940044, -0.561186275034653, -0.0031554569999846967, 0.0005643363680388445, 0.03686020256019372, -0.05032550121063136, 0.016056419282383626, -0.0031554569999846967],
            [0.561186275034653, 0.6325057608365241, 0.6315826560435309, 0.6445024733556043, 0.5870088706940066, 0.561186275034653, 0.003155456999984693, -0.0005643363680388411, -0.03686020256019374, 0.05032550121063137, -0.016056419282383626, 0.003155456999984693],
            [-0.561186275034653, -0.6325057608365245, -0.6315826560435318, -0.644502473355604, -0.5870088706940044, -0.561186275034653, -0.0031554569999846967, 0.0005643363680388445, 0.03686020256019372, -0.05032550121063136, 0.016056419282383626, -0.0031554569999846967],
            [0.561186275034653, 0.6325057608365241, 0.6315826560435309, 0.6445024733556043, 0.5870088706940066, 0.561186275034653, 0.003155456999984693, -0.0005643363680388411, -0.03686020256019374, 0.05032550121063137, -0.016056419282383626, 0.003155456999984693]]);


        let dwt_type = DiscreteWaletetType::DB3;
        let mode = WaveletMode::ANTISYMMETRIC;
        let transformed = transform_2_d(&data_2d, &dwt_type, &mode);

        assert_eq!(transformed, [[-7.059330713252228, -3.020493770561815, 4.743067531543018, 9.863918479147635, -4.527161526876614, 2.415028580534773, -0.6156945381601403, 4.126108713933346, -0.2977728281395854, 0.4878628480654078],
            [7.059330713252228, 3.0204937705618153, -4.743067531543019, -9.863918479147637, 4.527161526876615, -2.415028580534773, 0.6156945381601401, -4.1261087139333466, 0.2977728281395854, -0.487862848065408],
            [-7.059330713252228, -3.020493770561815, 4.743067531543018, 9.863918479147635, -4.527161526876614, 2.415028580534773, -0.6156945381601403, 4.126108713933346, -0.2977728281395854, 0.4878628480654078],
            [-5.13962958964367, -1.3593764793039607, 2.1133160289744146, 8.848346818769764, -4.462656778796553, 0.0930853552706612, -0.01991466612108822, 4.59846433713592, -0.13648078865726798, 0.4573240050577055],
            [16.833536637731637, 8.042337989847159, -12.650153134272548, -21.85449587263567, 9.628774379329414, -7.424032994820834, 1.8965217471613744, -8.24463316405913, 0.7903792943281923, -1.0612181758005852],
            [-5.13962958964367, -1.3593764793039607, 2.1133160289744146, 8.848346818769764, -4.462656778796553, 0.0930853552706612, -0.01991466612108822, 4.59846433713592, -0.13648078865726798, 0.4573240050577055]]);


        let data_2d = vec![vec![1.1515151515151515, 2.2626262626262626, 3.36363636363636363636, 4.0, 5.0, 6.0],
                           vec![6.616161616161616161, 7.7272727272727272, 8.818181818181818181, 9.0, 10.0, 11.0]];
        let dwt_type = DiscreteWaletetType::DB3;
        let mode = WaveletMode::REFLECT;
        let transformed = transform_2_d(&data_2d, &dwt_type, &mode);


        assert_eq!(transformed, [[13.732913469298964, 9.725434897432464, 9.764487540695733, 12.955200103349293, 16.377519544779094, -1.1705101601780417, 0.8092884428468606, -0.03389717286400182, -0.37092738704534667, 0.34180385299810595],
            [13.732913469298964, 9.725434897432464, 9.764487540695733, 12.955200103349293, 16.377519544779094, -1.1705101601780417, 0.8092884428468606, -0.03389717286400182, -0.37092738704534667, 0.34180385299810595],
            [13.732913469298964, 9.725434897432464, 9.764487540695733, 12.955200103349293, 16.377519544779094, -1.1705101601780417, 0.8092884428468606, -0.03389717286400182, -0.37092738704534667, 0.34180385299810595],
            [-5.0869533601674535, -5.451306868750656, -5.522218660151507, -5.106924365405492, -4.9841118970400435, 0.03868157653841747, -0.1032856421338551, 0.0037482935878783118, -0.011322159031109696, -0.15004429118355295],
            [-5.0869533601674535, -5.451306868750656, -5.522218660151507, -5.106924365405492, -4.9841118970400435, 0.03868157653841747, -0.1032856421338551, 0.0037482935878783118, -0.011322159031109696, -0.15004429118355295],
            [-5.0869533601674535, -5.451306868750656, -5.522218660151507, -5.106924365405492, -4.9841118970400435, 0.03868157653841747, -0.1032856421338551, 0.0037482935878783118, -0.011322159031109696, -0.15004429118355295]]);

        let mut array = vec![5.0, 7.0, 2.0];

        insert_padding_before(&mut array, &WaveletMode::ANTIREFLECT, 10);
        insert_padding_after(&mut array, &WaveletMode::ANTIREFLECT, 10, 10);

        assert_eq!(array, [20.0, 15.0, 17.0, 19.0, 14.0, 9.0, 11.0, 13.0, 8.0, 3.0, 5.0, 7.0, 2.0, -3.0, -1.0, 1.0, -4.0, -9.0, -7.0, -5.0, -10.0, -15.0, -13.0]);

        let data_2d = vec![vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0],
                           vec![7.0, 8.0, 9.0, 10.0, 11.0, 12.0]];


        let dwt_type = DiscreteWaletetType::DB3;
        let mode = WaveletMode::ANTIREFLECT;
        let transformed = transform_2_d(&data_2d, &dwt_type, &mode);

        assert_eq!(transformed, [[-42.556383650647675, -38.55638365064768, -34.55638365064768, -30.556383650647675, -26.556383650647668, -6.567066884119701e-16,
            6.853763933504303e-16, -3.997579540348742e-15, 0.0, 5.368332327049601e-15],
            [-18.556383650647675, -14.556383650647675, -10.556383650647678, -6.556383650647678, -2.5563836506476747, -3.4268819667521514e-16,
                5.733940987692024e-17, -1.485431606454701e-15, 0.0, 1.6001104262085414e-15],
            [5.443616349352322, 9.443616349352318, 13.443616349352325, 17.44361634935232, 21.443616349352318, -2.866970493846012e-17,
                -5.706975735965899e-16, 1.026716327439339e-15, 0.0, -2.1681114746325188e-15],
            [-1.1102230246251565e-15, 0.0, 0.0, 0.0, -8.881784197001252e-16, 0.0, 2.465190328815662e-32, -4.930380657631324e-32, 0.0, 9.860761315262648e-32],
            [-1.7763568394002505e-15, -1.7763568394002505e-15, 0.0, 0.0, -1.7763568394002505e-15, -1.232595164407831e-32, 4.930380657631324e-32, 0.0, 0.0, 0.0],
            [-3.552713678800501e-15, 0.0, 1.7763568394002505e-15, -3.552713678800501e-15, 0.0, -2.465190328815662e-32, 0.0, -1.9721522630525295e-31, 0.0, 0.0]]);
    }

    #[test]
    fn test_ff_1d_real() {
        let n: Vec<f64> = vec![1.0, 2.0, 3.0];
        let fft = fft_real1_d(&n);

        assert_eq!(3, fft.len());
        assert_eq!(fft[0], Complex::new(6.0, 0.0));
        assert_eq!(fft[1], Complex::new(-1.5000000000000009, 0.8660254037844382));
        assert_eq!(fft[2], Complex::new(-1.4999999999999987, -0.8660254037844404));
    }

    #[test]
    fn test_ff_2d_real() {
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];
        let fft = fft_real2_d(&n);

        assert_eq!(2, fft.len());
        assert_eq!(fft[0], [Complex::new(21.0, 0.0), Complex::new(-3.0000000000000027, 1.7320508075688756), Complex::new(-2.9999999999999964, -1.7320508075688823)]);
        assert_eq!(fft[1], [Complex::new(-9.0, -1.83697019872103e-15), Complex::new(8.881784197001252e-16, 8.881784197001252e-16), Complex::new(-8.881784197001252e-16, 1.7763568394002505e-15)]);

        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0], vec![7.0, 8.0, 9.0]];
        let fft = fft_real2_d(&n);

        assert_eq!(3, fft.len());
        assert_eq!(fft[0], [Complex::new(45.0, 0.0), Complex::new(-4.500000000000004, 2.5980762113533125), Complex::new(-4.499999999999993, -2.5980762113533267)]);
        assert_eq!(fft[1], [Complex::new(-13.500000000000007, 7.7942286340599445), Complex::new(2.1094237467877974e-15, 1.1102230246251565e-15), Complex::new(8.881784197001252e-16, 4.6629367034256575e-15)]);
        assert_eq!(fft[2], [Complex::new(-13.49999999999999, -7.794228634059962), Complex::new(0.0, 2.220446049250313e-15), Complex::new(-4.884981308350689e-15, 2.4424906541753444e-15)]);
    }

    #[test]
    #[ignore]
    pub fn test_decomposition() {
        let now = Instant::now();
        let pixels: Vec<Vec<Vec<f64>>> = get_pixel_separate_rgba("training_data/1.jpg");

        let wavelet_type = DiscreteWaletetType::DB1;
        let cw_type = ContinuousWaletetType::CMOR;
        let scales: Vec<f64> = vec![2.0, 4.0, 8.0, 16.0];
        let wavelet_mode = WaveletMode::SYMMETRIC;
        const MIN_HEIGHT: usize = 50;
        const MIN_WIDTH: usize= 50;

        let mut wavelet = CWTComplex {
            scales,
            cw_type,
            sampling_period: 1.0,
            m: 1.0,
            fb: 1.5,
            fc: 1.0,
            frequencies: vec![0.0],
        };

        let mut dw_transformed: Vec<Vec<f64>>;
        let dec_levels = 10;
        let mut decomposed_levels: Vec<Vec<Vec<f64>>> = Vec::new();

        remove_dir_contents("tests").unwrap_or_else(|why| {
            println!("! {:?}", why.kind());
        });

        println!("Transform : ==================================================================");
        for p in 0..pixels.len() {
            // encode with wavelet transform
            let mut pixel_rgba: Vec<Vec<f64>> = pixels[p].clone();

            for _i in 0..dec_levels.clone() {
                dw_transformed = transform_2_df64(&pixel_rgba, &wavelet_type, &wavelet_mode);

                if dw_transformed.len() < MIN_HEIGHT || dw_transformed[0].len() < MIN_WIDTH {
                    break;
                }
                //  save as images
                let ll_lh_hl_hh: Vec<Vec<Vec<f64>>> = get_ll_hl_lh_hh(&dw_transformed);

                pixel_rgba = ll_lh_hl_hh[0].clone();
            }
            decomposed_levels.push(pixel_rgba);
        }

        println!("DWT ist completed in: {}\n", now.elapsed().as_secs());

        for p in 0..decomposed_levels.len() {
            let wavelet_pixels: Vec<Vec<f64>> = decomposed_levels[p].clone();
            let (transformed, _frequencies) = cwt(&wavelet_pixels, &mut wavelet).unwrap();
            let cwt_transformed: Vec<Vec<Vec<Complex<f64>>>> = convert_to_c_array_f64_3d(transformed);
            let cwt_pixels: Vec<Vec<Vec<f64>>> = convert_c_to_f64_3d(&cwt_transformed);

            let file_name = String::from(format!("{}_cwt_{}_{}_dwt{}.jpg", "tests/cwt_", p.clone(), p.clone(), p));
            save_image_from_pixels(&wavelet_pixels, &file_name);

            for i in 0..cwt_pixels.len() {
                let file_name = String::from(format!("{}_cwt_{}_{}_{}.jpg", "tests/cwt_", p.clone(), p.clone(), i));
                save_image_from_pixels(&cwt_pixels[i], &file_name);
            }

            println!("level: {}, length: height: {}, width: {}\n", (&dec_levels), wavelet_pixels.len(), wavelet_pixels[1].len());
        }

        println!("seconds elapsed: {}",  now.elapsed().as_secs());
        println!("==================================================================");
    }
}