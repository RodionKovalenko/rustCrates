#[cfg(test)]
mod tests {
    use num::Complex;
    use crate::utils::data_converter::extract_array_data;
    use crate::utils::num_trait::{Array, ArrayType};
    use crate::wavelet_transform::cwt::{cwt, cwt_1d, cwt_2d, cwt_3d, cwt_4d, cwt_5d};
    use crate::wavelet_transform::cwt_types::ContinuousWaletetType;
    use crate::wavelet_transform::fft::{fft_real1_d, fft_real2_d};

    #[test]
    fn test_cwt_1d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<f64> = vec![1.0, 2.0, 3.0];

        let (transform_cwt, frequencies) = cwt_1d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![-0.6741036718169315, 0.7022068718530412, 2.338346780786158]);
        assert_eq!(transform_cwt[1], vec![0.5041676154169978, 2.23192367774792, 2.9105329108437434]);
        assert_eq!(transform_cwt[2], vec![1.4601796060827077, 2.417532862790752, 2.6758970235153003]);
        assert_eq!(transform_cwt[3], vec![1.7607301542542242, 2.297982153373181, 2.4488656061501315]);
        assert_eq!(transform_cwt[4], vec![1.7858211385362848, 2.1782640485201874, 2.271167123147155]);

        assert_eq!(5, frequencies.len());
        assert_eq!(frequencies[0], 0.25);
        assert_eq!(frequencies[1], 0.125);
        assert_eq!(frequencies[2], 0.08333333333333333);
        assert_eq!(frequencies[3], 0.0625);
        assert_eq!(frequencies[4], 0.05);


        let n: Vec<f64> = vec![1.0, 2.0, 3.0];
        let (transform_cwt, _frequencies) = cwt_1d(&n, &scales, &ContinuousWaletetType::MORL, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![0.13312470806030496, -0.013558459804805245, -0.4970335050651978]);
        assert_eq!(transform_cwt[1], vec![0.21189431614302395, -0.522390003427577, 0.5322270880760533]);
        assert_eq!(transform_cwt[2], vec![-0.9610723822936088, -0.06351489890411584, 1.3486265178219836]);
        assert_eq!(transform_cwt[3], vec![-1.0312340486572287, 0.7492048315884942, 1.7572443706756848]);
        assert_eq!(transform_cwt[4], vec![-0.4331415080904223, 1.1982045191610786, 1.9120855697024635]);
    }

    #[test]
    fn test_cwt_2d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];

        let (transform_cwt, frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[-0.67410367181693154, 0.7022068718530412, 2.338346780786158], [-0.5880689304740532, 2.9826221113324345, 4.618762020265538]]);
        assert_eq!(transform_cwt[1], vec![[0.5041676154169978, 2.23192367774792, 2.9105329108437434], [2.2939493779819182, 6.088766119191671, 6.767375352287462]]);
        assert_eq!(transform_cwt[2], vec![[1.4601796060827077, 2.417532862790752, 2.6758970235153003], [4.193716683741932, 6.237605277520296, 6.4959694382448205]]);
        assert_eq!(transform_cwt[3], vec![[1.7607301542542242, 2.297982153373181, 2.4488656061501315], [4.708172248389279, 5.858117973015669, 6.009001425792602]]);
        assert_eq!(transform_cwt[4], vec![[1.7858211385362848, 2.1782640485201874, 2.271167123147155], [4.684000069989407, 5.515337427270696, 5.60824050189765]]);

        assert_eq!(5, frequencies.len());
        assert_eq!(frequencies[0], 0.25);
        assert_eq!(frequencies[1], 0.125);
        assert_eq!(frequencies[2], 0.08333333333333333);
        assert_eq!(frequencies[3], 0.0625);
        assert_eq!(frequencies[4], 0.05);

        let scales: Vec<f64> = (2..5).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0, 4.0], vec![5.0, 6.0, 7.0, 8.0]];
        let (transform_cwt, frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(3, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[-0.5581140923146637, 1.6424011241705805, 3.7198727962465195, 4.048766419597308], [0.7659798833735681, 6.195335159184911, 9.671669270240919, 8.601700454611564]]);
        assert_eq!(transform_cwt[1], vec![[1.1168209497544161, 2.838871815948713, 4.029221437984578, 4.054589233381288], [4.41817839697176, 8.353640655412732, 10.47597573875988, 9.569358072845233]]);
        assert_eq!(transform_cwt[2], vec![[2.039363009077822, 3.1639287410556776, 3.829970255621962, 3.8520641929515707], [6.247918656081495, 8.776723088261488, 9.957922664617087, 9.464858540157326]]);

        assert_eq!(3, frequencies.len());
        assert_eq!(frequencies[0], 0.125);
        assert_eq!(frequencies[1], 0.08333333333333333);
        assert_eq!(frequencies[2], 0.0625);

        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0, 4.0], vec![5.0, 6.0, 7.0, 8.0]];
        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::MORL, &1.0);

        assert_eq!(3, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[-0.09947654391830107, 0.4599347842160327, -0.8706500057126223, 0.7802675561490783], [-0.1250426209060743, 1.4520966565080673, -2.2636900148528025, 1.772429428441178]]);
        assert_eq!(transform_cwt[1], vec![[-0.06117288750562455, -0.8318876704508201, -0.10585816484021879, 1.4778112296647783], [-0.014332696136464184, -0.31514882307966474, -0.2752312285846315, 1.9945500770359572]]);
        assert_eq!(transform_cwt[2], vec![[-1.4767664214628247, -0.7892306079844068, 1.248674719314122, 1.9992478113484808], [-2.4617944583899707, 0.17878315470687944, 3.2465542702166346, 2.9672615740396644]]);


        let scales: Vec<f64> = (5..10).map(|x| x as f64).collect();
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];
        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS1, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[-1.4216652542521802, -0.7393736993611678, 0.14658688966741465], [-3.214627170940993, -1.4038441411325764, 0.8110573314388728]],
                                       [[-1.1560698309634418, -0.5672717433901567, 0.10962876488391879], [-2.600557513364628, -1.0749471245956883, 0.6173041460895026]],
                                       [[-0.9646772006744484, -0.44693386305561605, 0.08195260328932553], [-2.162114044528977, -0.8435987128142975, 0.4786174530480493]],
                                       [[-0.7783742708627195, -0.39317800868043545, 0.0770961493084839], [-1.7552618616001827, -0.7458836271721042, 0.4298017678001954]],
                                       [[-0.6778466291062335, -0.3346644054307424, 0.07048087751875443], [-1.5185904653871027, -0.6385233676428417, 0.3743398397308937]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS2, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[1.670094212421506, 2.361587591670597, 2.5231947310153493], [4.561384005514502, 6.02517433368506, 6.186781473029793]],
                                       [[1.7868357410821185, 2.2556765947893287, 2.3855662078175404], [4.733982182815959, 5.736608696744483, 5.866498309772679]],
                                       [[1.8210379116144815, 2.1416158082951195, 2.280396042999311], [4.747578786052572, 5.458124696765944, 5.596904931470123]],
                                       [[1.772156247142522, 2.0852602236752533, 2.1542675384238312], [4.604194434809816, 5.264906045249569, 5.333913359998136]],
                                       [[1.7723171626458094, 1.984227178877041, 1.9770175344848195], [4.534945503632086, 4.955160713898438, 4.947951069506207]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS3, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[-1.918121121931172, -1.076605693314393, 0.20610530541960267], [-4.386064882073675, -2.0386389423648508, 1.168138554470137]],
                                       [[-1.626938220550193, -0.8420821530494805, 0.15871834584063874], [-3.687040123586735, -1.5926825272170322, 0.9093187200082654]],
                                       [[-1.3916539361654283, -0.6710947145753986, 0.1206028509125084], [-3.135875344621807, -1.2648678886912894, 0.7143760250284721]],
                                       [[-1.1434155190003565, -0.5941463857160402, 0.11489685950719453], [-2.5888197529037837, -1.1259288196334323, 0.646679293424657]],
                                       [[-1.0066588000531889, -0.5085781792429187, 0.10613836577988467], [-2.2620782773137416, -0.9696155880099893, 0.5671757745470192]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS4, &1.0);
        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, vec![[[1.095434258569225, 2.1386410858746037, 2.428668598729466], [3.332695938289473, 5.5641233493276605, 5.854150862182492]],
                                       [[1.3807367334479579, 2.119239794344948, 2.3327838518114747], [3.874479378435026, 5.458257528962267, 5.671801586428772]],
                                       [[1.5253238909917226, 2.055663447862927, 2.2512195035049603], [4.127368519825421, 5.285825661388846, 5.48138171703086]],
                                       [[1.5674509001639976, 2.023799314129125, 2.138570255613088], [4.175494192763551, 5.145576491435786, 5.260347432919735]],
                                       [[1.6163299669306634, 1.944589163783718, 1.9722032459853944], [4.211858036303606, 4.882183471110555, 4.909797553312217]]]);


        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS5, &1.0);
        assert_eq!(transform_cwt, vec![[[-2.0929808169639905, -1.2734627853065092, 0.2344636281686233], [-4.847979187697129, -2.404407595412811, 1.3654084382750151]],
                                       [[-1.857124294592359, -1.016042616341748, 0.18641417819913453], [-4.243262828692157, -1.917885212247363, 1.0882567741048388]],
                                       [[-1.6303560474129226, -0.8192663881196661, 0.1441276154210695], [-3.6950023666393013, -1.5418118907751732, 0.8666731180766635]],
                                       [[-1.3649044763001776, -0.7300367073554581, 0.13914533116769748], [-3.1034048191573715, -1.3819232362477814, 0.7910318600601062]],
                                       [[-1.215191188582184, -0.62847013958095, 0.12993522488335318], [-2.7393159507459295, -1.1972741629291352, 0.698739248231619]]]);


        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS6, &1.0);
        assert_eq!(transform_cwt, vec![[[0.5932340086186624, 1.9082319259785985, 2.3161354883591208], [2.2425598708217622, 5.076507486731894, 5.484411049112377]],
                                       [[1.0009666044326875, 1.9681098468261915, 2.260307434657116], [3.0590375292362064, 5.1394228079386775, 5.43162039576957]],
                                       [[1.2357544417492288, 1.9528577883036613, 2.2021746063927576], [3.5102669821725665, 5.069132084325979, 5.31844890241505]],
                                       [[1.3581807603958258, 1.9448578231941163, 2.103745472782245], [3.7285123447857456, 4.981310295176391, 5.1401979447644965]],
                                       [[1.4511182899120803, 1.8876356515857802, 1.949620953708558], [3.861550731147749, 4.7655781055565365, 4.827563407679295]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS7, &1.0);
        assert_eq!(transform_cwt, vec![[[-2.1088449018328155, -1.3980741384175097, 0.24638344735049728], [-4.958266098290694, -2.6314173277434585, 1.4797266366765442]],
                                       [[-1.964253412037736, -1.1385721517346414, 0.2028961151845255], [-4.528815793895847, -2.1446733519239625, 1.2089973153739453]],
                                       [[-1.772153452657097, -0.929115796690148, 0.1598042487240505], [-4.041388441926794, -1.7458058307507434, 0.9764942827847469]],
                                       [[-1.512770461577792, -0.8333882651915774, 0.15645920802987043], [-3.4550081120119795, -1.575773870107611, 0.8988448129460032]],
                                       [[-1.3624380362768727, -0.7215986571715653, 0.1477523108658907], [-3.0813846768501034, -1.3736118831996103, 0.7997655368940295]]]);

        let (transform_cwt, _frequencies) = cwt_2d(&n, &scales, &ContinuousWaletetType::GAUS8, &1.0);
        assert_eq!(transform_cwt, vec![[[0.16976056984694768, 1.687153362389826, 2.2029396495131746], [1.3120443926696528, 4.604723121317084, 5.120509408440386]],
                                       [[0.65938535202384, 1.8181880222938365, 2.184406928736499], [2.319419441805268, 4.820134235566595, 5.186353142009218]],
                                       [[0.9654698667242061, 1.8480862180093687, 2.148694961702508], [2.930135028376386, 4.845672102793282, 5.1462808464863885]],
                                       [[1.1572423414185264, 1.8627975513474906, 2.0642950945315124], [3.2962578443068105, 4.808117035756747, 5.00961457894074]],
                                       [[1.289461126655182, 1.8269082387062605, 1.9225130767929925], [3.5162775821851815, 4.6389742253307045, 4.73457906341741]]]);
    }

    #[test]
    fn test_cwt_3d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::MEXH, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt[0], vec![[[-0.6741036718169315, 0.7022068718530412, 2.338346780786158], [-0.5880689304740532, 2.9826221113324345, 4.618762020265538]], [[-0.6741036718169315, 0.7022068718530412, 2.338346780786158], [-0.5880689304740532, 2.9826221113324345, 4.618762020265538]]]);
        assert_eq!(transform_cwt[1], vec![[[0.5041676154169978, 2.23192367774792, 2.9105329108437434], [2.2939493779819182, 6.088766119191671, 6.767375352287462]], [[0.5041676154169978, 2.23192367774792, 2.9105329108437434], [2.2939493779819182, 6.088766119191671, 6.767375352287462]]]);
        assert_eq!(transform_cwt[2], vec![[[1.4601796060827077, 2.417532862790752, 2.6758970235153003], [4.193716683741932, 6.237605277520296, 6.4959694382448205]], [[1.4601796060827077, 2.417532862790752, 2.6758970235153003], [4.193716683741932, 6.237605277520296, 6.4959694382448205]]]);
        assert_eq!(transform_cwt[3], vec![[[1.7607301542542242, 2.297982153373181, 2.4488656061501315], [4.708172248389279, 5.858117973015669, 6.009001425792602]], [[1.7607301542542242, 2.297982153373181, 2.4488656061501315], [4.708172248389279, 5.858117973015669, 6.009001425792602]]]);
        assert_eq!(transform_cwt[4], vec![[[1.7858211385362848, 2.1782640485201874, 2.271167123147155], [4.684000069989407, 5.515337427270696, 5.60824050189765]], [[1.7858211385362848, 2.1782640485201874, 2.271167123147155], [4.684000069989407, 5.515337427270696, 5.60824050189765]]]);

        let scales = vec![1.0, 2.0, 3.0];
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS1, &1.0);
        assert_eq!(3, transform_cwt.len());

        assert_eq!(transform_cwt, vec![[[[-1.2395610940726745, -1.5060022157301245, -0.24828908285941376], [-3.9189852035172223, -2.449287065383139, 0.694995766793622]],
                                           [[-1.2395610940726745, -1.5060022157301245, -0.24828908285941376], [-3.9189852035172223, -2.449287065383139, 0.694995766793622]]],
                                       [[[-2.3112286755930693, -1.8314240244836684, 0.23981896270549802], [-5.696251666167044, -3.3848562648755123, 1.7932512030973904]],
                                           [[-2.3112286755930693, -1.8314240244836684, 0.23981896270549802], [-5.696251666167044, -3.3848562648755123, 1.7932512030973904]]],
                                       [[[-2.2095925166326147, -1.3341119315634973, 0.2289690082117302], [-5.133557721673222, -2.506422636394885, 1.4012797130431762]],
                                           [[-2.2095925166326147, -1.3341119315634973, 0.2289690082117302], [-5.133557721673222, -2.506422636394885, 1.4012797130431762]]]]);

        let scales: Vec<f64> = (5..10).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS2, &1.0);
        assert_eq!(5, transform_cwt.len());

        assert_eq!(transform_cwt, vec![[[[1.670094212421506, 2.361587591670597, 2.5231947310153493], [4.561384005514502, 6.02517433368506, 6.186781473029793]],
                                           [[1.670094212421506, 2.361587591670597, 2.5231947310153493], [4.561384005514502, 6.02517433368506, 6.186781473029793]]],
                                       [[[1.7868357410821185, 2.2556765947893287, 2.3855662078175404], [4.733982182815959, 5.736608696744483, 5.866498309772679]],
                                           [[1.7868357410821185, 2.2556765947893287, 2.3855662078175404], [4.733982182815959, 5.736608696744483, 5.866498309772679]]],
                                       [[[1.8210379116144815, 2.1416158082951195, 2.280396042999311], [4.747578786052572, 5.458124696765944, 5.596904931470123]],
                                           [[1.8210379116144815, 2.1416158082951195, 2.280396042999311], [4.747578786052572, 5.458124696765944, 5.596904931470123]]],
                                       [[[1.772156247142522, 2.0852602236752533, 2.1542675384238312], [4.604194434809816, 5.264906045249569, 5.333913359998136]],
                                           [[1.772156247142522, 2.0852602236752533, 2.1542675384238312], [4.604194434809816, 5.264906045249569, 5.333913359998136]]],
                                       [[[1.7723171626458094, 1.984227178877041, 1.9770175344848195], [4.534945503632086, 4.955160713898438, 4.947951069506207]],
                                           [[1.7723171626458094, 1.984227178877041, 1.9770175344848195], [4.534945503632086, 4.955160713898438, 4.947951069506207]]]]);

        let n: Vec<Vec<Vec<f64>>> = vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]], vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]];
        let (transform_cwt, _frequencies) = cwt_3d(&n, &scales, &ContinuousWaletetType::GAUS3, &1.0);
        assert_eq!(5, transform_cwt.len());

        assert_eq!(transform_cwt, vec![[[[-1.918121121931172, -1.076605693314393, 0.20610530541960267], [-4.386064882073675, -2.0386389423648508, 1.168138554470137]],
                                           [[-1.918121121931172, -1.076605693314393, 0.20610530541960267], [-4.386064882073675, -2.0386389423648508, 1.168138554470137]]],
                                       [[[-1.626938220550193, -0.8420821530494805, 0.15871834584063874], [-3.687040123586735, -1.5926825272170322, 0.9093187200082654]],
                                           [[-1.626938220550193, -0.8420821530494805, 0.15871834584063874], [-3.687040123586735, -1.5926825272170322, 0.9093187200082654]]],
                                       [[[-1.3916539361654283, -0.6710947145753986, 0.1206028509125084], [-3.135875344621807, -1.2648678886912894, 0.7143760250284721]],
                                           [[-1.3916539361654283, -0.6710947145753986, 0.1206028509125084], [-3.135875344621807, -1.2648678886912894, 0.7143760250284721]]],
                                       [[[-1.1434155190003565, -0.5941463857160402, 0.11489685950719453], [-2.5888197529037837, -1.1259288196334323, 0.646679293424657]],
                                           [[-1.1434155190003565, -0.5941463857160402, 0.11489685950719453], [-2.5888197529037837, -1.1259288196334323, 0.646679293424657]]],
                                       [[[-1.0066588000531889, -0.5085781792429187, 0.10613836577988467], [-2.2620782773137416, -0.9696155880099893, 0.5671757745470192]],
                                           [[-1.0066588000531889, -0.5085781792429187, 0.10613836577988467], [-2.2620782773137416, -0.9696155880099893, 0.5671757745470192]]]]);
    }

    #[test]
    fn test_cwt_4d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let n: Vec<Vec<Vec<Vec<f64>>>> = vec![vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]], vec![vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]]]];
        let (transform_cwt, _frequencies) = cwt_4d(&n, &scales, &ContinuousWaletetType::GAUS5, &1.0);

        assert_eq!(5, transform_cwt.len());
        assert_eq!(transform_cwt, [[[[[-0.1657550696508761, 0.20081903509780552, -0.8172621748795368], [-1.2024735815778178, 0.9643799425808102, -1.5808230823625433]]],
            [[[-0.1657550696508761, 0.20081903509780552, -0.8172621748795368], [-1.2024735815778178, 0.9643799425808102, -1.5808230823625433]]]],
            [[[[-0.42596691239951073, -1.4690864141362907, -0.12258796194844793], [-2.1069835878368215, -2.4789602532771404, 0.887285877192433]]],
                [[[-0.42596691239951073, -1.4690864141362907, -0.12258796194844793], [-2.1069835878368215, -2.4789602532771404, 0.887285877192433]]]],
            [[[[-1.8299265106830607, -1.8159083624195949, 0.21421219115597553], [-4.754019054235886, -3.338498777601226, 1.7368026063376771]]],
                [[[-1.8299265106830607, -1.8159083624195949, 0.21421219115597553], [-4.754019054235886, -3.338498777601226, 1.7368026063376771]]]],
            [[[[-2.229078501082547, -1.5304506556653241, 0.23160135252377856], [-5.31649330325941, -2.8519896618071003, 1.5531403586656412]]],
                [[[-2.229078501082547, -1.5304506556653241, 0.23160135252377856], [-5.31649330325941, -2.8519896618071003, 1.5531403586656412]]]],
            [[[[-2.0929808169639905, -1.2734627853065092, 0.2344636281686233], [-4.847979187697129, -2.404407595412811, 1.3654084382750151]]],
                [[[-2.0929808169639905, -1.2734627853065092, 0.2344636281686233], [-4.847979187697129, -2.404407595412811, 1.3654084382750151]]]]])
    }

    #[test]
    fn test_cwt_5d() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();
        let array: Vec<Vec<Vec<Vec<Vec<f64>>>>> = vec![
            vec![
                vec![
                    vec![
                        vec![0.64628843, 0.82996726, 0.87006796, 0.48253978],
                        vec![0.43919335, 0.06566719, 0.06158033, 0.81224427],
                        vec![0.88918919, 0.02075738, 0.58363584, 0.37932007],
                    ],
                ],
                vec![
                    vec![
                        vec![0.19943944, 0.37560552, 0.09522572, 0.62038108],
                        vec![0.6841884, 0.01350215, 0.27384274, 0.69728249],
                        vec![0.53189142, 0.99672615, 0.03854367, 0.30125334],
                    ],
                ],
                vec![
                    vec![
                        vec![0.68961004, 0.59868674, 0.00769092, 0.51516282],
                        vec![0.8776632, 0.70469546, 0.40765667, 0.37929271],
                        vec![0.43646761, 0.13832165, 0.15463361, 0.37499216],
                    ],
                ],
            ],
            vec![
                vec![
                    vec![
                        vec![0.41296786, 0.42958691, 0.1443393, 0.9200188],
                        vec![0.03331772, 0.86528934, 0.18012958, 0.35431852],
                        vec![0.7720741, 0.410375, 0.37368207, 0.82489805],
                    ],
                ],
                vec![
                    vec![
                        vec![0.13901775, 0.80671067, 0.04599183, 0.5085041],
                        vec![0.69940342, 0.68145641, 0.73054897, 0.34058879],
                        vec![0.19212236, 0.19808242, 0.38803242, 0.66113789],
                    ],
                ],
                vec![
                    vec![
                        vec![0.06598777, 0.37103162, 0.06875532, 0.06488421],
                        vec![0.71048144, 0.97461436, 0.14561172, 0.56559529],
                        vec![0.02740725, 0.95295214, 0.76303086, 0.96808568],
                    ],
                ],
            ],
        ];

        let (transform_cwt, _frequencies) = cwt_5d(&array, &scales, &ContinuousWaletetType::GAUS8, &1.0);
        assert_eq!(transform_cwt, [[[[[[0.01683524617691013, -0.051892508953225606, -0.020318355442237875, -0.05079524999682936], [-0.0372274837029145, -0.07617363769893008, 0.16372372985922262, -0.10027993695622081],
            [-0.11272981131225016, -0.02844754911445156, 0.1155744586209145, -0.13347573264195178]]], [[[0.030202930694384292, -0.0714325583651402, 0.06619270934977517, -0.03035829189627991],
            [-0.07912072015211959, -0.062109185230698784, 0.1651703025711645, -0.12744644560768453], [0.084172231872312, -0.16818324056886552, 0.008261711714914813, 0.08457462421049262]]],
            [[[0.012917375372991827, -0.1553502457576662, 0.10633879670286041, 0.002715430952361101], [-0.007858882080656375, -0.12462644781088178, 0.06010625642230156, -0.017528920108096493],
                [-0.031537541914754226, -0.05350978421797427, 0.08385963533938307, -0.05340908689062614]]]], [[[[0.014204387113820181, -0.10440761458530977, 0.1279335599328084, -0.0679260472819308], [0.11308274731389856, -0.08341788142922482, -0.05589984005810531, 0.06460175123139854], [-0.035717258279108155, -0.10427678407562206, 0.1430459368094018, -0.09874900273289516]]],
            [[[0.09922502762411198, -0.11336481007971339, 0.0013247085352736665, 0.05009727017139447], [-0.004850826755894912, -0.056053391146341176, -0.0023732539507786317, -0.04404824069937156],
                [-0.005355098793068528, -0.01195602214322355, 0.05871045945231476, -0.09056378773821197]]], [[[0.0430809677088558, -0.03908565257917329, -0.0280754533965786, 0.035826787791230504],
                [0.05875733101097319, -0.17982080848778859, 0.061979387814569284, 0.03518064969463101], [0.10540802917114477, -0.033259922651356286, -0.040889325798353054, -0.04957627953479046]]]]],
            [[[[[-0.058219173747814, 0.09839816890741097, 0.013302758606216707, 0.08964121469090766], [0.21748601652274285, 0.19153434549673606, -0.5467081018861479, 0.2803250788614788],
                [0.3651705358257768, 0.04439735355185184, -0.40228514332765736, 0.36264706099208616]]], [[[-0.02657900048464111, 0.18419360756236566, -0.23436330843816064, 0.06685078276229672],
                [0.32104529475144755, 0.1451419537147592, -0.5565921182444404, 0.3537340977650398], [-0.25668832921248097, 0.4921998631595131, -0.06029373321316936, -0.32052356259075493]]],
                [[[0.005531599326939173, 0.4454811847301876, -0.37173658474571053, -0.06373755152148393], [0.02766476880520652, 0.3418089010936786, -0.23458307885017615, -0.015427011315798891],
                    [0.1335679620670988, 0.13835979037218926, -0.287265902339059, 0.13606385446471242]]]],
                [[[[0.058063680861820025, 0.2684240765526855, -0.44228092142490333, 0.168480627188263], [-0.33720703313471956, 0.228339123122871, 0.15204738209619043, -0.23295393219831642],
                    [0.18638429471054177, 0.26244304373689914, -0.4990508233787521, 0.24652809040343748]]], [[[-0.26606340163525544, 0.31757824088808073, -0.03149736234684255, -0.1913583332839886],
                    [0.00020315945615702284, 0.12306790933808447, -0.03702016166534943, 0.0732901098939796], [0.0809196691870144, -0.00931845371379021, -0.2132281153944358, 0.25620292411460666]]],
                    [[[-0.13978623480692295, 0.11207084382628803, 0.0790758008274282, -0.1266436052226112], [-0.14777117589496916, 0.5111875951053133, -0.24104188655229902, -0.17848484181383653],
                        [-0.25957498418092817, 0.02556730060251363, 0.0809783654398998, 0.10777537375841895]]]]],
            [[[[[-0.24947159211490033, 0.25160294931853977, 0.47897276511010656, 0.14345162579367302], [0.14502648096979806, -0.11485525557146502, -0.22215543294800907, 0.18822909263354734],
                [0.14611913513819352, 0.11259982472250131, -0.02144861969304793, 0.06040124921940956]]],
                [[[-0.038317264598009555, -0.017195371956315847, 0.020516411895047926, 0.1456457129227165], [0.17920536987032198, -0.034196437603178205, -0.18229533873415715, 0.1456644308200169],
                    [-0.00920378506507262, 0.5287746153998245, 0.2594612125569176, -0.28272833292837946]]],
                [[[0.15724580344884906, 0.34896477429856443, -0.006506341325011409, -0.17794451381472567],
                    [0.05877430086264038, 0.4396816537970298, 0.19879208881152424, -0.1617354852244254],
                    [0.09388208918091805, 0.06551063973783167, -0.053863996003585504, 0.025724542881410826]]]],
                [[[[0.02035713742869354, -0.030575014103274265, -0.04876096459765523, 0.19967585608778776],
                    [-0.24947002184346642, 0.20672971662595765, 0.36231064202737207, 0.02469883763456783],
                    [0.08936185395601012, 0.10157386095554445, -0.01707522797430361, 0.12102906321593263]]], [[[-0.13964281398758224, 0.19629223558162356, 0.22226222908880278, 0.00491169188884859],
                    [-0.13851750990139924, 0.297072782954778, 0.37517853989876493, 0.03489380152852106], [-0.1169252902821191, -0.17708359568891038, 0.0625279362098427, 0.3307053716062816]]],
                    [[[-0.08100552710218879, 0.14671298904942268, 0.1595359114062974, -0.05056426143563019],
                        [0.028860193670364652, 0.468799919499621, 0.19793894690701327, -0.18850251305837315], [-0.5027777128469296, -0.12710355911386712, 0.5152870609137583, 0.5204615317981325]]]]],
            [[[[[-0.16271485022323173, 0.4889661741613443, 0.7608065051056414, 0.3763782343631674],
                [-0.08055091222643479, -0.06419294316104915, 0.07181139511998025, 0.22950971331729297], [0.06679583576678433, 0.2730972717583445, 0.28152712147395603, 0.10926677868872947]]],
                [[[-0.1341024391553073, 0.0347605038043034, 0.21716904818765592, 0.24859997835419195], [-0.012818338252060607, 0.0637464508927637, 0.14376106542034772, 0.1851068300351616],
                    [0.1389836686421475, 0.5653408505656354, 0.4651643386056859, -0.025816692999822144]]],
                [[[0.14755531793292853, 0.3839417267234071, 0.28158651726100614, -0.006172726267513862], [0.13255975041258827, 0.5660982370926896, 0.5044072298936075, 0.0447682528434159],
                    [0.022260921317267507, 0.12200373793373764, 0.138963322383599, 0.08027128024557542]]]],
                [[[[-0.1501380661792673, 0.04709713041699887, 0.26897144838347964, 0.3270572751801629], [-0.1480590031903184, 0.27180158267977883, 0.4639453670569496, 0.23392226771490313],
                    [-0.044078832998440676, 0.23282300548734386, 0.3645954475729975, 0.25901477746601886]]],
                    [[[-0.10298755760357281, 0.2363695301130858, 0.38264076000399905, 0.20467641177628343],
                        [-0.047922703367083486, 0.495398953393008, 0.6332108786837496, 0.23215815721561212],
                        [-0.25557860798461884, -0.05704979569583485, 0.2682120810845002, 0.3953770950591869]]], [[[-0.010734276726092506, 0.16985811565368333, 0.19476242122471257, 0.04011554094890163],
                    [0.09715798140773668, 0.5421216006585836, 0.5081079802115951, 0.0739498515909931],
                    [-0.5460381686176189, 0.09852057941276215, 0.7661101405548123, 0.762540724241424]]]]], [[[[[0.0616676967864382, 0.6502933929473468, 0.8691095936610259, 0.5637348633956459],
                [-0.11013227911152323, 0.06891584601673059, 0.24271508551301313, 0.28861922341965424],
                [0.12685037535262902, 0.3931670968452765, 0.44101013280402673, 0.23660843300782375]]],
                [[[-0.09910506378395358, 0.1376703668461225, 0.31792027151545577, 0.3144595966371829],
                    [-0.015229377096495633, 0.20119866844766648, 0.3281742289430718, 0.2760873062071606],
                    [0.25568082318658775, 0.578098890797657, 0.5514469903888469, 0.19450735233998684]]],
                [[[0.18924131998227933, 0.43598589354943007, 0.43212043865855626, 0.18034089161162145],
                    [0.2582213546191048, 0.6421622889244742, 0.647584842672975, 0.27064131432274907], [0.03852738083042952, 0.1911784034491117, 0.2436935428723148, 0.1590063121575922]]]],
                [[[[-0.11887079843937548, 0.2004426926583283, 0.4383308339322249, 0.4269327573788284],
                    [-0.013415322454473758, 0.33162510988175536, 0.48778279351015885, 0.34488317410614283],
                    [0.017686940138319257, 0.3920391182876162, 0.5647042963636095, 0.41383546839824503]]],
                    [[[-0.009493712742833556, 0.30252584289755025, 0.4483087674868578, 0.32498964346254194],
                        [0.13670195721742104, 0.615708279642419, 0.737452486018853, 0.4160360588304359], [-0.19681893039045092, 0.09903640392258695, 0.3702936023524528, 0.4255687646166662]]],
                    [[[0.04797241397154636, 0.17792182989197466, 0.20029837767310443, 0.09931379981155734], [0.21203643746753514, 0.6105667039993601, 0.6537253168386176, 0.31103449233835884],
                        [-0.32679968863201475, 0.342424756360152, 0.8553506799183992, 0.850103089490316]]]]]])
    }

    #[test]
    fn test_cwt_generic() {
        let scales: Vec<f64> = (1..6).map(|x| x as f64).collect();

        let data_1d: Vec<i32> = vec![1, 2, 3];
        let data_2d: Vec<Vec<i64>> = vec![vec![1, 2], vec![3, 4]];
        let data_3d: Vec<Vec<Vec<i32>>> = vec![vec![vec![1, 2], vec![3, 4]], vec![vec![5, 6], vec![7, 8]]];
        let data_4d: Vec<Vec<Vec<Vec<i32>>>> = vec![vec![vec![vec![1, 2], vec![3, 4]], vec![vec![5, 6], vec![7, 8]]], vec![vec![vec![9, 10], vec![11, 12]], vec![vec![13, 14], vec![15, 16]]]];
        let data_5d: Vec<Vec<Vec<Vec<Vec<i32>>>>> = vec![vec![vec![vec![vec![1, 2], vec![3, 4]], vec![vec![5, 6], vec![7, 8]]], vec![vec![vec![9, 10], vec![11, 12]], vec![vec![13, 14], vec![15, 16]]]],
                                                         vec![vec![vec![vec![17, 18], vec![19, 20]], vec![vec![21, 22], vec![23, 24]]], vec![vec![vec![25, 26], vec![27, 28]], vec![vec![29, 30], vec![31, 32]]]]];

        let (transform_cwt, _frequencies) = cwt(&data_1d, &scales, &ContinuousWaletetType::GAUS1, &1.0).unwrap();
        let result = extract_array_data::<Vec<Vec<f64>>>(&transform_cwt).unwrap();

        assert_eq!(result, [[-1.2395610940726745, -1.5060022157301245, -0.24828908285941376], [-2.3112286755930693, -1.8314240244836684, 0.23981896270549802],
            [-2.2095925166326147, -1.3341119315634973, 0.2289690082117302], [-1.813197927614067, -0.9559156277008043, 0.16963612511897352],
            [-1.4216652542521802, -0.7393736993611678, 0.14658688966741465]]);

        let (transform_cwt, _frequencies) = cwt(&data_2d, &scales, &ContinuousWaletetType::GAUS2, &1.0).unwrap();
        let result = extract_array_data::<Vec<Vec<Vec<f64>>>>(&transform_cwt).unwrap();

        assert_eq!(result, [[[-0.3060203534761658, 1.141662279114441], [-0.23148661391418068, 2.663878651267021]], [[0.5091909220235318, 1.701535791476272],
            [1.585560441205823, 3.970250180111296]], [[0.9951288262898925, 1.5950042163393108], [2.5219257246928897, 3.7216765047917213]],
            [[1.1127227805462125, 1.474501644699346], [2.7169461093255416, 3.4405038376318053]], [[1.1403920109991097, 1.3019991503438684],
                [2.7147837387795093, 3.0379980174690244]]]);

        let (transform_cwt, _frequencies) = cwt(&data_3d, &scales, &ContinuousWaletetType::MORL, &1.0).unwrap();
        let result = extract_array_data::<Vec<Vec<Vec<Vec<f64>>>>>(&transform_cwt).unwrap();

        assert_eq!(result, [[[[0.11408953141269737, -0.36938551384769114], [0.10505055820950149, -0.861899532311287]], [[0.0960115850063058, -1.354413550774883],
            [0.08697261180310989, -1.8469275692384786]]], [[[-0.5248492745896832, 0.5297678169139295], [-0.8731092768747122, 1.23612490613248]],
            [[-1.221369279159741, 1.94248199535103], [-1.5696292814447697, 2.6488390845695804]]], [[[-0.3847928036335807, 1.0273486130925362],
            [-0.42713606956964056, 2.3971467638825668]], [[-0.46947933550570076, 3.766944914672598], [-0.5118226014417607, 5.136743065462629]]],
            [[[0.12259253102244727, 1.1306320701096662], [0.622062418748123, 2.6381414969225414]], [[1.1215323064737985, 4.145650923735417],
                [1.621002194199475, 5.653160350548292]]], [[[0.42063199694518966, 1.1345130474866036], [1.2194350097192523, 2.6471971108020647]],
                [[2.018238022493315, 4.159881174117526], [2.8170410352673767, 5.672565237432988]]]]);

        let (transform_cwt, _frequencies) = cwt(&data_4d, &scales, &ContinuousWaletetType::GAUS3, &1.0).unwrap();
        let result = extract_array_data::<Vec<Vec<Vec<Vec<Vec<f64>>>>>>(&transform_cwt).unwrap();

        assert_eq!(result, [[[[[-0.40954365117858665, -0.6299757903758068], [-1.4490630927329833, -0.6299757903758006]], [[-2.48858253428738, -0.6299757903757941],
            [-3.5281019758417766, -0.6299757903757881]]], [[[-4.5676214173961736, -0.6299757903757817], [-5.60714085895057, -0.6299757903757754]],
            [[-6.646660300504967, -0.6299757903757675], [-7.686179742059364, -0.6299757903757621]]]],
            [[[[-1.3853738173402912, -0.3964667960920586], [-3.1672144307726526, -0.3964667960920366]], [[-4.949055044205013, -0.396466796092014],
                [-6.730895657637374, -0.39646679609199265]]], [[[-8.512736271069736, -0.39646679609197005], [-10.294576884502098, -0.3964667960919474]],
                [[-12.076417497934456, -0.3964667960919248], [-13.858258111366817, -0.3964667960919047]]]], [[[[-1.2368472819854375, -0.2416055910474154],
                [-2.7153001550183022, -0.24160559104739157]], [[-4.193753028051166, -0.24160559104737003], [-5.6722059010840296, -0.24160559104734697]]],
                [[[-7.150658774116895, -0.24160559104732388], [-8.62911164714976, -0.24160559104730234]], [[-10.107564520182624, -0.24160559104727466],
                    [-11.586017393215487, -0.24160559104725618]]]], [[[[-0.9519371451966578, -0.16944029493135782], [-2.0733145853246855, -0.16944029493133606]],
                [[-3.194692025452711, -0.16944029493131474], [-4.316069465580737, -0.16944029493129342]]], [[[-5.437446905708764, -0.16944029493127033],
                [-6.558824345836792, -0.169440294931249]], [[-7.680201785964819, -0.1694402949312277], [-8.801579226092844, -0.16944029493120638]]]],
            [[[[-0.7559279436309078, -0.11457244426390793], [-1.626428331525734, -0.11457244426388757]], [[-2.49692871942056, -0.1145724442638697],
                [-3.367429107315385, -0.11457244426384786]]], [[[-4.2379294952102144, -0.114572444263828], [-5.108429883105035, -0.11457244426380814]],
                [[-5.978930270999863, -0.11457244426378828], [-6.849430658894685, -0.11457244426377239]]]]]);

        let (transform_cwt, _frequencies) = cwt(&data_5d, &scales, &ContinuousWaletetType::GAUS4, &1.0).unwrap();
        let result = extract_array_data::<Vec<Vec<Vec<Vec<Vec<Vec<f64>>>>>>>(&transform_cwt).unwrap();

        assert_eq!(result, [[[[[[-0.2569349278547328, 0.3904669517575087], [-0.38371420512362464, 0.9110895541008439]], [[-0.5104934823925164, 1.4317121564441793],
            [-0.6372727596614083, 1.9523347587875146]]], [[[-0.7640520369303, 2.4729573611308497], [-0.8908313141991915, 2.9935799634741853]],
            [[-1.0176105914680837, 3.5142025658175204], [-1.1443898687369753, 4.034825168160856]]]], [[[[-1.2711691460058674, 4.555447770504191],
            [-1.397948423274759, 5.076070372847527]], [[-1.524727700543651, 5.596692975190862], [-1.6515069778125424, 6.117315577534197]]],
            [[[-1.7782862550814338, 6.637938179877532], [-1.9050655323503258, 7.158560782220867]], [[-2.031844809619218, 7.679183384564203],
                [-2.1586240868881097, 8.199805986907538]]]]], [[[[[-0.1117852232349974, 1.4397629873729212],
            [0.2563505493209825, 3.359446970536808]], [[0.6244863218769625, 5.279130953700696], [0.9926220944329438, 7.198814936864583]]],
            [[[1.3607578669889226, 9.11849892002847], [1.728893639544904, 11.038182903192359]], [[2.097029412100883, 12.957866886356246],
                [2.465165184656864, 14.877550869520132]]]], [[[[2.8333009572128427, 16.797234852684017], [3.2014367297688255, 18.716918835847906]],
[[3.5695725023248017, 20.63660281901179], [3.937708274880787, 22.55628680217568]]], [[[4.305844047436763, 24.47597078533957],
            [4.673979819992742, 26.39565476850346]], [[5.0421155925487255, 28.315338751667344], [5.410251365104707, 30.23502273483123]]]]],
            [[[[[0.5928407802066497, 1.498528829541691], [1.685191170260532, 3.4965672689306073]], [[2.7775415603144142, 5.494605708319524],
                [3.869891950368298, 7.4926441477084404]]], [[[4.962242340422181, 9.490682587097355], [6.0545927304760605, 11.488721026486273]],
                [[7.146943120529945, 13.486759465875187], [8.239293510583828, 15.484797905264106]]]], [[[[9.331643900637708, 17.482836344653023],
                [10.423994290691592, 19.480874784041937]], [[11.516344680745474, 21.478913223430855], [12.608695070799355, 23.47695166281977]]],
                [[[13.701045460853239, 25.47499010220869], [14.793395850907123, 27.4730285415976]], [[15.885746240961003, 29.471066980986517], [16.978096631014882
, 31.46910542037543]]]]], [[[[[0.8804074893032736, 1.431042218781384], [2.2378290515336765, 3.3390985104898925]], [[3.5952506137640805, 5.2471548021984],
                [4.952672175994483, 7.15521109390691]]], [[[6.3100937382248885, 9.063267385615418], [7.66751530045529, 10.971323677323927]],
                [[9.024936862685696, 12.879379969032435], [10.382358424916097, 14.787436260740943]]]], [[[[11.739779987146498, 16.69549255244945],
                [13.097201549376905, 18.60354884415796]], [[14.454623111607308, 20.511605135866468], [15.812044673837711, 22.419661427574976]]],
                [[[17.16946623606811, 24.327717719283484], [18.526887798298517, 26.235774010991996]], [[19.884309360528924, 28.1438303027005],
                    [21.24173092275933, 30.051886594409012]]]]], [[[[[0.9968136647235846, 1.2868411775784567], [2.4225743886399886, 3.00262941434973]],
                [[3.848335112556395, 4.718417651121002], [5.274095836472798, 6.4342058878922765]]], [[[6.699856560389203, 8.149994124663548],
                [8.125617284305607, 9.865782361434823]], [[9.551378008222013, 11.581570598206095], [10.977138732138416, 13.297358834977368]]]],
                [[[[12.40289945605482, 15.013147071748643], [13.828660179971225, 16.728935308519915]], [[15.25442090388763, 18.444723545291186],
                    [16.68018162780404, 20.16051178206246]]], [[[18.105942351720444, 21.876300018833735], [19.531703075636848, 23.59208825560501]],
                    [[20.95746379955325, 25.307876492376284], [22.38322452346966, 27.023664729147555]]]]]]);
    }

    #[test]
    fn test_ff_1d_real() {
        let n: Vec<f64> = vec![1.0, 2.0, 3.0];
        let fft = fft_real1_d(&n);

        assert_eq!(3, fft.len());
        assert_eq!(fft[0], Complex::new(6.0, 0.0));
        assert_eq!(fft[1], Complex::new(-1.5000000000000009, 0.8660254037844382));
        assert_eq!(fft[2], Complex::new(-1.4999999999999987, -0.8660254037844404));
    }

    #[test]
    fn test_ff_2d_real() {
        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0]];
        let fft = fft_real2_d(&n);

        assert_eq!(2, fft.len());
        assert_eq!(fft[0], [Complex::new(21.0, 0.0), Complex::new(-3.0000000000000027, 1.7320508075688756), Complex::new(-2.9999999999999964, -1.7320508075688823)]);
        assert_eq!(fft[1], [Complex::new(-9.0, -1.83697019872103e-15), Complex::new(8.881784197001252e-16, 8.881784197001252e-16), Complex::new(-8.881784197001252e-16, 1.7763568394002505e-15)]);

        let n: Vec<Vec<f64>> = vec![vec![1.0, 2.0, 3.0], vec![4.0, 5.0, 6.0], vec![7.0, 8.0, 9.0]];
        let fft = fft_real2_d(&n);

        assert_eq!(3, fft.len());
        assert_eq!(fft[0], [Complex::new(45.0, 0.0), Complex::new(-4.500000000000004, 2.5980762113533125), Complex::new(-4.499999999999993, -2.5980762113533267)]);
        assert_eq!(fft[1], [Complex::new(-13.500000000000007, 7.7942286340599445), Complex::new(2.1094237467877974e-15, 1.1102230246251565e-15), Complex::new(8.881784197001252e-16, 4.6629367034256575e-15)]);
        assert_eq!(fft[2], [Complex::new(-13.49999999999999, -7.794228634059962), Complex::new(0.0, 2.220446049250313e-15), Complex::new(-4.884981308350689e-15, 2.4424906541753444e-15)]);
    }
}